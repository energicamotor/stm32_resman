
test_pwr_sleep_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023fc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002694  08002694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026b8  080026b8  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  080026b8  080026b8  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026b8  080026b8  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080026c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAM_D3       0000017c  24000010  080026d0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000028  2400018c  0800284c  0002018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  240001b4  0800284c  000201b4  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112cf  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002356  00000000  00000000  00031489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  000337e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000698  00000000  00000000  00033f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037ec9  00000000  00000000  000345e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000098ba  00000000  00000000  0006c4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00170036  00000000  00000000  00075d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001e5da1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bb0  00000000  00000000  001e5df4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400018c 	.word	0x2400018c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800267c 	.word	0x0800267c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000190 	.word	0x24000190
 80002d4:	0800267c 	.word	0x0800267c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
  if (ResMgr_Request(RESMGR_ID_GPIOB, RESMGR_FLAGS_ACCESS_NORMAL | \
 8000412:	2300      	movs	r3, #0
 8000414:	2200      	movs	r2, #0
 8000416:	210a      	movs	r1, #10
 8000418:	2008      	movs	r0, #8
 800041a:	f001 ff39 	bl	8002290 <ResMgr_Request>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_GPIO_Init+0x1c>
                  RESMGR_FLAGS_CPU1 , 0, NULL) != RESMGR_OK)
  {
    /* USER CODE BEGIN RESMGR_UTILITY_GPIOB */
    Error_Handler();
 8000424:	f000 f946 	bl	80006b4 <Error_Handler>
    /* USER CODE END RESMGR_UTILITY_GPIOB */
  }

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
 8000434:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b12      	ldr	r3, [pc, #72]	; (8000480 <MX_GPIO_Init+0x74>)
 8000438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800043c:	4a10      	ldr	r2, [pc, #64]	; (8000480 <MX_GPIO_Init+0x74>)
 800043e:	f043 0302 	orr.w	r3, r3, #2
 8000442:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_GPIO_Init+0x74>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	f003 0302 	and.w	r3, r3, #2
 8000450:	603b      	str	r3, [r7, #0]
 8000452:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2101      	movs	r1, #1
 8000458:	480a      	ldr	r0, [pc, #40]	; (8000484 <MX_GPIO_Init+0x78>)
 800045a:	f000 fe7d 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800045e:	2301      	movs	r3, #1
 8000460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	2301      	movs	r3, #1
 8000464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046a:	2300      	movs	r3, #0
 800046c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	4619      	mov	r1, r3
 8000472:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_GPIO_Init+0x78>)
 8000474:	f000 fbb6 	bl	8000be4 <HAL_GPIO_Init>

}
 8000478:	bf00      	nop
 800047a:	3718      	adds	r7, #24
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	58024400 	.word	0x58024400
 8000484:	58020400 	.word	0x58020400

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b08a      	sub	sp, #40	; 0x28
 800048c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800048e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000492:	627b      	str	r3, [r7, #36]	; 0x24
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000494:	bf00      	nop
 8000496:	4b47      	ldr	r3, [pc, #284]	; (80005b4 <main+0x12c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d004      	beq.n	80004ac <main+0x24>
 80004a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a4:	1e5a      	subs	r2, r3, #1
 80004a6:	627a      	str	r2, [r7, #36]	; 0x24
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dcf4      	bgt.n	8000496 <main+0xe>
  if ( timeout < 0 )
 80004ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	da01      	bge.n	80004b6 <main+0x2e>
  {
  Error_Handler();
 80004b2:	f000 f8ff 	bl	80006b4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 f9ef 	bl	8000898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f87f 	bl	80005bc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80004be:	4b3d      	ldr	r3, [pc, #244]	; (80005b4 <main+0x12c>)
 80004c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c4:	4a3b      	ldr	r2, [pc, #236]	; (80005b4 <main+0x12c>)
 80004c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ce:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <main+0x12c>)
 80004d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004d8:	61fb      	str	r3, [r7, #28]
 80004da:	69fb      	ldr	r3, [r7, #28]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 fe55 	bl	800118c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004e2:	2100      	movs	r1, #0
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fe6b 	bl	80011c0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004f0:	bf00      	nop
 80004f2:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <main+0x12c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d104      	bne.n	8000508 <main+0x80>
 80004fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000500:	1e5a      	subs	r2, r3, #1
 8000502:	627a      	str	r2, [r7, #36]	; 0x24
 8000504:	2b00      	cmp	r3, #0
 8000506:	dcf4      	bgt.n	80004f2 <main+0x6a>
if ( timeout < 0 )
 8000508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050a:	2b00      	cmp	r3, #0
 800050c:	da01      	bge.n	8000512 <main+0x8a>
{
Error_Handler();
 800050e:	f000 f8d1 	bl	80006b4 <Error_Handler>
}
/* USER CODE END Boot_Mode_Sequence_2 */
  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 8000512:	f000 f8d5 	bl	80006c0 <MX_RESMGR_UTILITY_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f7ff ff79 	bl	800040c <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = RESMGR_BUSY;
 800051a:	2302      	movs	r3, #2
 800051c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	  while (status == RESMGR_BUSY)
 8000520:	e008      	b.n	8000534 <main+0xac>
	  {
		 status = ResMgr_Request(RESMGR_ID_GPIOB, RESMGR_FLAGS_CPU1 , 0, NULL);
 8000522:	2300      	movs	r3, #0
 8000524:	2200      	movs	r2, #0
 8000526:	2108      	movs	r1, #8
 8000528:	2008      	movs	r0, #8
 800052a:	f001 feb1 	bl	8002290 <ResMgr_Request>
 800052e:	4603      	mov	r3, r0
 8000530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  while (status == RESMGR_BUSY)
 8000534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000538:	2b02      	cmp	r3, #2
 800053a:	d0f2      	beq.n	8000522 <main+0x9a>
	  }


	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

	    /* GPIO Ports Clock Enable */
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <main+0x12c>)
 800054e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000552:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <main+0x12c>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <main+0x12c>)
 800055e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

	    /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2101      	movs	r1, #1
 800056e:	4812      	ldr	r0, [pc, #72]	; (80005b8 <main+0x130>)
 8000570:	f000 fdf2 	bl	8001158 <HAL_GPIO_WritePin>

	    /*Configure GPIO pin : PtPin */
	    GPIO_InitStruct.Pin = LED_Pin;
 8000574:	2301      	movs	r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
	    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	4619      	mov	r1, r3
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <main+0x130>)
 800058c:	f000 fb2a 	bl	8000be4 <HAL_GPIO_Init>


	    HAL_Delay(5000);
 8000590:	f241 3088 	movw	r0, #5000	; 0x1388
 8000594:	f000 fa12 	bl	80009bc <HAL_Delay>
	    HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
 8000598:	2101      	movs	r1, #1
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <main+0x130>)
 800059c:	f000 fcd2 	bl	8000f44 <HAL_GPIO_DeInit>

	    ResMgr_Release(RESMGR_ID_GPIOB, RESMGR_FLAGS_CPU1);
 80005a0:	2108      	movs	r1, #8
 80005a2:	2008      	movs	r0, #8
 80005a4:	f001 ff84 	bl	80024b0 <ResMgr_Release>
	    HAL_Delay(2000);
 80005a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ac:	f000 fa06 	bl	80009bc <HAL_Delay>
  {
 80005b0:	e7b3      	b.n	800051a <main+0x92>
 80005b2:	bf00      	nop
 80005b4:	58024400 	.word	0x58024400
 80005b8:	58020400 	.word	0x58020400

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b09c      	sub	sp, #112	; 0x70
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c6:	224c      	movs	r2, #76	; 0x4c
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f84e 	bl	800266c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2220      	movs	r2, #32
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f848 	bl	800266c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005dc:	2004      	movs	r0, #4
 80005de:	f000 fe03 	bl	80011e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005e2:	2300      	movs	r3, #0
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <SystemClock_Config+0xf0>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a30      	ldr	r2, [pc, #192]	; (80006ac <SystemClock_Config+0xf0>)
 80005ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f0:	6193      	str	r3, [r2, #24]
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <SystemClock_Config+0xf0>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <SystemClock_Config+0xf4>)
 80005fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000600:	4a2b      	ldr	r2, [pc, #172]	; (80006b0 <SystemClock_Config+0xf4>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemClock_Config+0xf4>)
 800060a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000614:	bf00      	nop
 8000616:	4b25      	ldr	r3, [pc, #148]	; (80006ac <SystemClock_Config+0xf0>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800061e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000622:	d1f8      	bne.n	8000616 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000628:	2301      	movs	r3, #1
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2340      	movs	r3, #64	; 0x40
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000634:	2300      	movs	r3, #0
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000638:	2320      	movs	r3, #32
 800063a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 480;
 800063c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000640:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000646:	2302      	movs	r3, #2
 8000648:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800064e:	2304      	movs	r3, #4
 8000650:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000652:	2300      	movs	r3, #0
 8000654:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fe1c 	bl	800129c <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800066a:	f000 f823 	bl	80006b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	233f      	movs	r3, #63	; 0x3f
 8000670:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2303      	movs	r3, #3
 8000674:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800067a:	2308      	movs	r3, #8
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800067e:	2340      	movs	r3, #64	; 0x40
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000682:	2340      	movs	r3, #64	; 0x40
 8000684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800068a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2104      	movs	r1, #4
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fa2d 	bl	8001af4 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80006a0:	f000 f808 	bl	80006b4 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3770      	adds	r7, #112	; 0x70
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	58024800 	.word	0x58024800
 80006b0:	58000400 	.word	0x58000400

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>
	...

080006c0 <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 80006c4:	4905      	ldr	r1, [pc, #20]	; (80006dc <MX_RESMGR_UTILITY_Init+0x1c>)
 80006c6:	4806      	ldr	r0, [pc, #24]	; (80006e0 <MX_RESMGR_UTILITY_Init+0x20>)
 80006c8:	f001 fd44 	bl	8002154 <ResMgr_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 80006d2:	f7ff ffef 	bl	80006b4 <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08000731 	.word	0x08000731
 80006e0:	080006e5 	.word	0x080006e5

080006e4 <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	2b05      	cmp	r3, #5
 80006f2:	d811      	bhi.n	8000718 <MX_RESMGR_UTILITY_SendMsg+0x34>
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d811      	bhi.n	800071e <MX_RESMGR_UTILITY_SendMsg+0x3a>
 80006fa:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	0800071f 	.word	0x0800071f
 8000704:	0800071f 	.word	0x0800071f
 8000708:	0800071f 	.word	0x0800071f
 800070c:	0800071f 	.word	0x0800071f
 8000710:	0800071f 	.word	0x0800071f
 8000714:	0800071f 	.word	0x0800071f
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	2bff      	cmp	r3, #255	; 0xff
 800071c:	d001      	beq.n	8000722 <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 800071e:	bf00      	nop
 8000720:	e000      	b.n	8000724 <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 8000722:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 8000724:	bf00      	nop
}
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	2b15      	cmp	r3, #21
 800073e:	d831      	bhi.n	80007a4 <MX_RESMGR_UTILITY_Callback+0x74>
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	2b15      	cmp	r3, #21
 8000744:	d831      	bhi.n	80007aa <MX_RESMGR_UTILITY_Callback+0x7a>
 8000746:	a201      	add	r2, pc, #4	; (adr r2, 800074c <MX_RESMGR_UTILITY_Callback+0x1c>)
 8000748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074c:	080007ab 	.word	0x080007ab
 8000750:	080007ab 	.word	0x080007ab
 8000754:	080007ab 	.word	0x080007ab
 8000758:	080007ab 	.word	0x080007ab
 800075c:	080007ab 	.word	0x080007ab
 8000760:	080007ab 	.word	0x080007ab
 8000764:	080007ab 	.word	0x080007ab
 8000768:	080007ab 	.word	0x080007ab
 800076c:	080007ab 	.word	0x080007ab
 8000770:	080007ab 	.word	0x080007ab
 8000774:	080007ab 	.word	0x080007ab
 8000778:	080007ab 	.word	0x080007ab
 800077c:	080007ab 	.word	0x080007ab
 8000780:	080007ab 	.word	0x080007ab
 8000784:	080007ab 	.word	0x080007ab
 8000788:	080007ab 	.word	0x080007ab
 800078c:	080007ab 	.word	0x080007ab
 8000790:	080007ab 	.word	0x080007ab
 8000794:	080007ab 	.word	0x080007ab
 8000798:	080007ab 	.word	0x080007ab
 800079c:	080007ab 	.word	0x080007ab
 80007a0:	080007ab 	.word	0x080007ab
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2bff      	cmp	r3, #255	; 0xff
 80007a8:	d001      	beq.n	80007ae <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 80007aa:	bf00      	nop
 80007ac:	e000      	b.n	80007b0 <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 80007ae:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 80007b0:	bf00      	nop
}
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <HAL_MspInit+0x30>)
 80007c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007c8:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x30>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x30>)
 80007d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007d8:	f003 0302 	and.w	r3, r3, #2
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	58024400 	.word	0x58024400

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <NMI_Handler+0x4>

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fa:	e7fe      	b.n	80007fa <HardFault_Handler+0x4>

080007fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <MemManage_Handler+0x4>

08000802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000802:	b480      	push	{r7}
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000806:	e7fe      	b.n	8000806 <BusFault_Handler+0x4>

08000808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080c:	e7fe      	b.n	800080c <UsageFault_Handler+0x4>

0800080e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083c:	f000 f89e 	bl	800097c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800087c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000848:	f7ff fd46 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000854:	e002      	b.n	800085c <LoopCopyDataInit>

08000856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085a:	3304      	adds	r3, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800085c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000860:	d3f9      	bcc.n	8000856 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000862:	4a0a      	ldr	r2, [pc, #40]	; (800088c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000864:	4c0a      	ldr	r4, [pc, #40]	; (8000890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000868:	e001      	b.n	800086e <LoopFillZerobss>

0800086a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800086c:	3204      	adds	r2, #4

0800086e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000870:	d3fb      	bcc.n	800086a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000872:	f001 fed7 	bl	8002624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000876:	f7ff fe07 	bl	8000488 <main>
  bx  lr
 800087a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800087c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000880:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000884:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000888:	080026c0 	.word	0x080026c0
  ldr r2, =_sbss
 800088c:	2400018c 	.word	0x2400018c
  ldr r4, =_ebss
 8000890:	240001b4 	.word	0x240001b4

08000894 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC3_IRQHandler>
	...

08000898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089e:	2003      	movs	r0, #3
 80008a0:	f000 f96e 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008a4:	f001 fadc 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 80008a8:	4602      	mov	r2, r0
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_Init+0x68>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	0a1b      	lsrs	r3, r3, #8
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	4913      	ldr	r1, [pc, #76]	; (8000904 <HAL_Init+0x6c>)
 80008b6:	5ccb      	ldrb	r3, [r1, r3]
 80008b8:	f003 031f 	and.w	r3, r3, #31
 80008bc:	fa22 f303 	lsr.w	r3, r2, r3
 80008c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <HAL_Init+0x68>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <HAL_Init+0x6c>)
 80008cc:	5cd3      	ldrb	r3, [r2, r3]
 80008ce:	f003 031f 	and.w	r3, r3, #31
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	fa22 f303 	lsr.w	r3, r2, r3
 80008d8:	4a0b      	ldr	r2, [pc, #44]	; (8000908 <HAL_Init+0x70>)
 80008da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <HAL_Init+0x74>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e2:	200f      	movs	r0, #15
 80008e4:	f000 f814 	bl	8000910 <HAL_InitTick>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e002      	b.n	80008f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008f2:	f7ff ff63 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024400 	.word	0x58024400
 8000904:	08002694 	.word	0x08002694
 8000908:	24000004 	.word	0x24000004
 800090c:	24000000 	.word	0x24000000

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_InitTick+0x60>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d101      	bne.n	8000924 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	e021      	b.n	8000968 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_InitTick+0x64>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_InitTick+0x60>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000932:	fbb3 f3f1 	udiv	r3, r3, r1
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f945 	bl	8000bca <HAL_SYSTICK_Config>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00e      	b.n	8000968 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d80a      	bhi.n	8000966 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f000 f91d 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095c:	4a06      	ldr	r2, [pc, #24]	; (8000978 <HAL_InitTick+0x68>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2400000c 	.word	0x2400000c
 8000974:	24000000 	.word	0x24000000
 8000978:	24000008 	.word	0x24000008

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	2400000c 	.word	0x2400000c
 80009a0:	240001b0 	.word	0x240001b0

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	240001b0 	.word	0x240001b0

080009bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c4:	f7ff ffee 	bl	80009a4 <HAL_GetTick>
 80009c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d4:	d005      	beq.n	80009e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_Delay+0x44>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4413      	add	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009e2:	bf00      	nop
 80009e4:	f7ff ffde 	bl	80009a4 <HAL_GetTick>
 80009e8:	4602      	mov	r2, r0
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d8f7      	bhi.n	80009e4 <HAL_Delay+0x28>
  {
  }
}
 80009f4:	bf00      	nop
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2400000c 	.word	0x2400000c

08000a04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <HAL_GetREVID+0x14>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	0c1b      	lsrs	r3, r3, #16
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	5c001000 	.word	0x5c001000

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <__NVIC_SetPriorityGrouping+0x40>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a46:	4313      	orrs	r3, r2
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x40>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	05fa0000 	.word	0x05fa0000

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff47 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff5e 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff90 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5f 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f7ff ffb2 	bl	8000b3c <SysTick_Config>
 8000bd8:	4603      	mov	r3, r0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bf2:	4b89      	ldr	r3, [pc, #548]	; (8000e18 <HAL_GPIO_Init+0x234>)
 8000bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bf6:	e194      	b.n	8000f22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	4013      	ands	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 8186 	beq.w	8000f1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d005      	beq.n	8000c28 <HAL_GPIO_Init+0x44>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	f003 0201 	and.w	r2, r3, #1
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d017      	beq.n	8000cc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	4013      	ands	r3, r2
 8000cac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69ba      	ldr	r2, [r7, #24]
 8000cc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0303 	and.w	r3, r3, #3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d123      	bne.n	8000d1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	220f      	movs	r2, #15
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	691a      	ldr	r2, [r3, #16]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	08da      	lsrs	r2, r3, #3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3208      	adds	r2, #8
 8000d14:	69b9      	ldr	r1, [r7, #24]
 8000d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0203 	and.w	r2, r3, #3
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f000 80e0 	beq.w	8000f1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5c:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <HAL_GPIO_Init+0x238>)
 8000d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d62:	4a2e      	ldr	r2, [pc, #184]	; (8000e1c <HAL_GPIO_Init+0x238>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d6c:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <HAL_GPIO_Init+0x238>)
 8000d6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d7a:	4a29      	ldr	r2, [pc, #164]	; (8000e20 <HAL_GPIO_Init+0x23c>)
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	089b      	lsrs	r3, r3, #2
 8000d80:	3302      	adds	r3, #2
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	220f      	movs	r2, #15
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a20      	ldr	r2, [pc, #128]	; (8000e24 <HAL_GPIO_Init+0x240>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d052      	beq.n	8000e4c <HAL_GPIO_Init+0x268>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a1f      	ldr	r2, [pc, #124]	; (8000e28 <HAL_GPIO_Init+0x244>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d031      	beq.n	8000e12 <HAL_GPIO_Init+0x22e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <HAL_GPIO_Init+0x248>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d02b      	beq.n	8000e0e <HAL_GPIO_Init+0x22a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_GPIO_Init+0x24c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d025      	beq.n	8000e0a <HAL_GPIO_Init+0x226>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a1c      	ldr	r2, [pc, #112]	; (8000e34 <HAL_GPIO_Init+0x250>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01f      	beq.n	8000e06 <HAL_GPIO_Init+0x222>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <HAL_GPIO_Init+0x254>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d019      	beq.n	8000e02 <HAL_GPIO_Init+0x21e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a1a      	ldr	r2, [pc, #104]	; (8000e3c <HAL_GPIO_Init+0x258>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x21a>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_GPIO_Init+0x25c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x216>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a18      	ldr	r2, [pc, #96]	; (8000e44 <HAL_GPIO_Init+0x260>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x212>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <HAL_GPIO_Init+0x264>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x20e>
 8000dee:	2309      	movs	r3, #9
 8000df0:	e02d      	b.n	8000e4e <HAL_GPIO_Init+0x26a>
 8000df2:	230a      	movs	r3, #10
 8000df4:	e02b      	b.n	8000e4e <HAL_GPIO_Init+0x26a>
 8000df6:	2308      	movs	r3, #8
 8000df8:	e029      	b.n	8000e4e <HAL_GPIO_Init+0x26a>
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	e027      	b.n	8000e4e <HAL_GPIO_Init+0x26a>
 8000dfe:	2306      	movs	r3, #6
 8000e00:	e025      	b.n	8000e4e <HAL_GPIO_Init+0x26a>
 8000e02:	2305      	movs	r3, #5
 8000e04:	e023      	b.n	8000e4e <HAL_GPIO_Init+0x26a>
 8000e06:	2304      	movs	r3, #4
 8000e08:	e021      	b.n	8000e4e <HAL_GPIO_Init+0x26a>
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e01f      	b.n	8000e4e <HAL_GPIO_Init+0x26a>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e01d      	b.n	8000e4e <HAL_GPIO_Init+0x26a>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e01b      	b.n	8000e4e <HAL_GPIO_Init+0x26a>
 8000e16:	bf00      	nop
 8000e18:	58000080 	.word	0x58000080
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58000400 	.word	0x58000400
 8000e24:	58020000 	.word	0x58020000
 8000e28:	58020400 	.word	0x58020400
 8000e2c:	58020800 	.word	0x58020800
 8000e30:	58020c00 	.word	0x58020c00
 8000e34:	58021000 	.word	0x58021000
 8000e38:	58021400 	.word	0x58021400
 8000e3c:	58021800 	.word	0x58021800
 8000e40:	58021c00 	.word	0x58021c00
 8000e44:	58022000 	.word	0x58022000
 8000e48:	58022400 	.word	0x58022400
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	69fa      	ldr	r2, [r7, #28]
 8000e50:	f002 0203 	and.w	r2, r2, #3
 8000e54:	0092      	lsls	r2, r2, #2
 8000e56:	4093      	lsls	r3, r2
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e5e:	4938      	ldr	r1, [pc, #224]	; (8000f40 <HAL_GPIO_Init+0x35c>)
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3302      	adds	r3, #2
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f47f ae63 	bne.w	8000bf8 <HAL_GPIO_Init+0x14>
  }
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	3724      	adds	r7, #36	; 0x24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	58000400 	.word	0x58000400

08000f44 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f52:	4b75      	ldr	r3, [pc, #468]	; (8001128 <HAL_GPIO_DeInit+0x1e4>)
 8000f54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8000f56:	e0d9      	b.n	800110c <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	4013      	ands	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80cc 	beq.w	8001106 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8000f6e:	4a6f      	ldr	r2, [pc, #444]	; (800112c <HAL_GPIO_DeInit+0x1e8>)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a67      	ldr	r2, [pc, #412]	; (8001130 <HAL_GPIO_DeInit+0x1ec>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d037      	beq.n	8001008 <HAL_GPIO_DeInit+0xc4>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a66      	ldr	r2, [pc, #408]	; (8001134 <HAL_GPIO_DeInit+0x1f0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d031      	beq.n	8001004 <HAL_GPIO_DeInit+0xc0>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a65      	ldr	r2, [pc, #404]	; (8001138 <HAL_GPIO_DeInit+0x1f4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d02b      	beq.n	8001000 <HAL_GPIO_DeInit+0xbc>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a64      	ldr	r2, [pc, #400]	; (800113c <HAL_GPIO_DeInit+0x1f8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d025      	beq.n	8000ffc <HAL_GPIO_DeInit+0xb8>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a63      	ldr	r2, [pc, #396]	; (8001140 <HAL_GPIO_DeInit+0x1fc>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d01f      	beq.n	8000ff8 <HAL_GPIO_DeInit+0xb4>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a62      	ldr	r2, [pc, #392]	; (8001144 <HAL_GPIO_DeInit+0x200>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d019      	beq.n	8000ff4 <HAL_GPIO_DeInit+0xb0>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a61      	ldr	r2, [pc, #388]	; (8001148 <HAL_GPIO_DeInit+0x204>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d013      	beq.n	8000ff0 <HAL_GPIO_DeInit+0xac>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a60      	ldr	r2, [pc, #384]	; (800114c <HAL_GPIO_DeInit+0x208>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d00d      	beq.n	8000fec <HAL_GPIO_DeInit+0xa8>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a5f      	ldr	r2, [pc, #380]	; (8001150 <HAL_GPIO_DeInit+0x20c>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d007      	beq.n	8000fe8 <HAL_GPIO_DeInit+0xa4>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a5e      	ldr	r2, [pc, #376]	; (8001154 <HAL_GPIO_DeInit+0x210>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_GPIO_DeInit+0xa0>
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	e012      	b.n	800100a <HAL_GPIO_DeInit+0xc6>
 8000fe4:	230a      	movs	r3, #10
 8000fe6:	e010      	b.n	800100a <HAL_GPIO_DeInit+0xc6>
 8000fe8:	2308      	movs	r3, #8
 8000fea:	e00e      	b.n	800100a <HAL_GPIO_DeInit+0xc6>
 8000fec:	2307      	movs	r3, #7
 8000fee:	e00c      	b.n	800100a <HAL_GPIO_DeInit+0xc6>
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	e00a      	b.n	800100a <HAL_GPIO_DeInit+0xc6>
 8000ff4:	2305      	movs	r3, #5
 8000ff6:	e008      	b.n	800100a <HAL_GPIO_DeInit+0xc6>
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	e006      	b.n	800100a <HAL_GPIO_DeInit+0xc6>
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e004      	b.n	800100a <HAL_GPIO_DeInit+0xc6>
 8001000:	2302      	movs	r3, #2
 8001002:	e002      	b.n	800100a <HAL_GPIO_DeInit+0xc6>
 8001004:	2301      	movs	r3, #1
 8001006:	e000      	b.n	800100a <HAL_GPIO_DeInit+0xc6>
 8001008:	2300      	movs	r3, #0
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	f002 0203 	and.w	r2, r2, #3
 8001010:	0092      	lsls	r2, r2, #2
 8001012:	4093      	lsls	r3, r2
 8001014:	68ba      	ldr	r2, [r7, #8]
 8001016:	429a      	cmp	r2, r3
 8001018:	d136      	bne.n	8001088 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	401a      	ands	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	685a      	ldr	r2, [r3, #4]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43db      	mvns	r3, r3
 8001030:	401a      	ands	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001044:	4013      	ands	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	43db      	mvns	r3, r3
 8001052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001056:	4013      	ands	r3, r2
 8001058:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f003 0303 	and.w	r3, r3, #3
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800106a:	4a30      	ldr	r2, [pc, #192]	; (800112c <HAL_GPIO_DeInit+0x1e8>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	43da      	mvns	r2, r3
 800107a:	482c      	ldr	r0, [pc, #176]	; (800112c <HAL_GPIO_DeInit+0x1e8>)
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	400a      	ands	r2, r1
 8001082:	3302      	adds	r3, #2
 8001084:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2103      	movs	r1, #3
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	08d2      	lsrs	r2, r2, #3
 80010bc:	4019      	ands	r1, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2103      	movs	r1, #3
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	401a      	ands	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	2101      	movs	r1, #1
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	401a      	ands	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2103      	movs	r1, #3
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	401a      	ands	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	fa22 f303 	lsr.w	r3, r2, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	f47f af1f 	bne.w	8000f58 <HAL_GPIO_DeInit+0x14>
  }
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	58000080 	.word	0x58000080
 800112c:	58000400 	.word	0x58000400
 8001130:	58020000 	.word	0x58020000
 8001134:	58020400 	.word	0x58020400
 8001138:	58020800 	.word	0x58020800
 800113c:	58020c00 	.word	0x58020c00
 8001140:	58021000 	.word	0x58021000
 8001144:	58021400 	.word	0x58021400
 8001148:	58021800 	.word	0x58021800
 800114c:	58021c00 	.word	0x58021c00
 8001150:	58022000 	.word	0x58022000
 8001154:	58022400 	.word	0x58022400

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001194:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_HSEM_FastTake+0x2c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3320      	adds	r3, #32
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <HAL_HSEM_FastTake+0x30>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d101      	bne.n	80011a8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e000      	b.n	80011aa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	58026400 	.word	0x58026400
 80011bc:	80000300 	.word	0x80000300

080011c0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80011ca:	4906      	ldr	r1, [pc, #24]	; (80011e4 <HAL_HSEM_Release+0x24>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	58026400 	.word	0x58026400

080011e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80011f0:	4b29      	ldr	r3, [pc, #164]	; (8001298 <HAL_PWREx_ConfigSupply+0xb0>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	2b06      	cmp	r3, #6
 80011fa:	d00a      	beq.n	8001212 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_PWREx_ConfigSupply+0xb0>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	429a      	cmp	r2, r3
 8001208:	d001      	beq.n	800120e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e040      	b.n	8001290 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	e03e      	b.n	8001290 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <HAL_PWREx_ConfigSupply+0xb0>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800121a:	491f      	ldr	r1, [pc, #124]	; (8001298 <HAL_PWREx_ConfigSupply+0xb0>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4313      	orrs	r3, r2
 8001220:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001222:	f7ff fbbf 	bl	80009a4 <HAL_GetTick>
 8001226:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001228:	e009      	b.n	800123e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800122a:	f7ff fbbb 	bl	80009a4 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001238:	d901      	bls.n	800123e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e028      	b.n	8001290 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800123e:	4b16      	ldr	r3, [pc, #88]	; (8001298 <HAL_PWREx_ConfigSupply+0xb0>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800124a:	d1ee      	bne.n	800122a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b1e      	cmp	r3, #30
 8001250:	d008      	beq.n	8001264 <HAL_PWREx_ConfigSupply+0x7c>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b2e      	cmp	r3, #46	; 0x2e
 8001256:	d005      	beq.n	8001264 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b1d      	cmp	r3, #29
 800125c:	d002      	beq.n	8001264 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b2d      	cmp	r3, #45	; 0x2d
 8001262:	d114      	bne.n	800128e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001264:	f7ff fb9e 	bl	80009a4 <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800126a:	e009      	b.n	8001280 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800126c:	f7ff fb9a 	bl	80009a4 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800127a:	d901      	bls.n	8001280 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e007      	b.n	8001290 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_PWREx_ConfigSupply+0xb0>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128c:	d1ee      	bne.n	800126c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	58024800 	.word	0x58024800

0800129c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f000 bc1c 	b.w	8001ae8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 8087 	beq.w	80013cc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012be:	4b9e      	ldr	r3, [pc, #632]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012c8:	4b9b      	ldr	r3, [pc, #620]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 80012ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80012ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d0:	2b10      	cmp	r3, #16
 80012d2:	d007      	beq.n	80012e4 <HAL_RCC_OscConfig+0x48>
 80012d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d6:	2b18      	cmp	r3, #24
 80012d8:	d110      	bne.n	80012fc <HAL_RCC_OscConfig+0x60>
 80012da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4b94      	ldr	r3, [pc, #592]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d06c      	beq.n	80013ca <HAL_RCC_OscConfig+0x12e>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d168      	bne.n	80013ca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e3f5      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x78>
 8001306:	4b8c      	ldr	r3, [pc, #560]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a8b      	ldr	r2, [pc, #556]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e02e      	b.n	8001372 <HAL_RCC_OscConfig+0xd6>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10c      	bne.n	8001336 <HAL_RCC_OscConfig+0x9a>
 800131c:	4b86      	ldr	r3, [pc, #536]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a85      	ldr	r2, [pc, #532]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b83      	ldr	r3, [pc, #524]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a82      	ldr	r2, [pc, #520]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e01d      	b.n	8001372 <HAL_RCC_OscConfig+0xd6>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800133e:	d10c      	bne.n	800135a <HAL_RCC_OscConfig+0xbe>
 8001340:	4b7d      	ldr	r3, [pc, #500]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a7c      	ldr	r2, [pc, #496]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001346:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b7a      	ldr	r3, [pc, #488]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a79      	ldr	r2, [pc, #484]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	e00b      	b.n	8001372 <HAL_RCC_OscConfig+0xd6>
 800135a:	4b77      	ldr	r3, [pc, #476]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a76      	ldr	r2, [pc, #472]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	4b74      	ldr	r3, [pc, #464]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a73      	ldr	r2, [pc, #460]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800136c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001370:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d013      	beq.n	80013a2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137a:	f7ff fb13 	bl	80009a4 <HAL_GetTick>
 800137e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001382:	f7ff fb0f 	bl	80009a4 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b64      	cmp	r3, #100	; 0x64
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e3a9      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001394:	4b68      	ldr	r3, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0xe6>
 80013a0:	e014      	b.n	80013cc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a2:	f7ff faff 	bl	80009a4 <HAL_GetTick>
 80013a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013aa:	f7ff fafb 	bl	80009a4 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b64      	cmp	r3, #100	; 0x64
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e395      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f0      	bne.n	80013aa <HAL_RCC_OscConfig+0x10e>
 80013c8:	e000      	b.n	80013cc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 80ca 	beq.w	800156e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013da:	4b57      	ldr	r3, [pc, #348]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013e2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013e4:	4b54      	ldr	r3, [pc, #336]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <HAL_RCC_OscConfig+0x164>
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	2b18      	cmp	r3, #24
 80013f4:	d156      	bne.n	80014a4 <HAL_RCC_OscConfig+0x208>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d151      	bne.n	80014a4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_OscConfig+0x17c>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e367      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001418:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 0219 	bic.w	r2, r3, #25
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4944      	ldr	r1, [pc, #272]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800142a:	f7ff fabb 	bl	80009a4 <HAL_GetTick>
 800142e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fab7 	bl	80009a4 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e351      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001444:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001450:	f7ff fad8 	bl	8000a04 <HAL_GetREVID>
 8001454:	4603      	mov	r3, r0
 8001456:	f241 0203 	movw	r2, #4099	; 0x1003
 800145a:	4293      	cmp	r3, r2
 800145c:	d817      	bhi.n	800148e <HAL_RCC_OscConfig+0x1f2>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b40      	cmp	r3, #64	; 0x40
 8001464:	d108      	bne.n	8001478 <HAL_RCC_OscConfig+0x1dc>
 8001466:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800146e:	4a32      	ldr	r2, [pc, #200]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001474:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001476:	e07a      	b.n	800156e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	031b      	lsls	r3, r3, #12
 8001486:	492c      	ldr	r1, [pc, #176]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148c:	e06f      	b.n	800156e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	061b      	lsls	r3, r3, #24
 800149c:	4926      	ldr	r1, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a2:	e064      	b.n	800156e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d047      	beq.n	800153c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 0219 	bic.w	r2, r3, #25
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	491f      	ldr	r1, [pc, #124]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014be:	f7ff fa71 	bl	80009a4 <HAL_GetTick>
 80014c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff fa6d 	bl	80009a4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e307      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014d8:	4b17      	ldr	r3, [pc, #92]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	f7ff fa8e 	bl	8000a04 <HAL_GetREVID>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d817      	bhi.n	8001522 <HAL_RCC_OscConfig+0x286>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b40      	cmp	r3, #64	; 0x40
 80014f8:	d108      	bne.n	800150c <HAL_RCC_OscConfig+0x270>
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001502:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	6053      	str	r3, [r2, #4]
 800150a:	e030      	b.n	800156e <HAL_RCC_OscConfig+0x2d2>
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	031b      	lsls	r3, r3, #12
 800151a:	4907      	ldr	r1, [pc, #28]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
 8001520:	e025      	b.n	800156e <HAL_RCC_OscConfig+0x2d2>
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	061b      	lsls	r3, r3, #24
 8001530:	4901      	ldr	r1, [pc, #4]	; (8001538 <HAL_RCC_OscConfig+0x29c>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
 8001536:	e01a      	b.n	800156e <HAL_RCC_OscConfig+0x2d2>
 8001538:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153c:	4b9e      	ldr	r3, [pc, #632]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a9d      	ldr	r2, [pc, #628]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fa2c 	bl	80009a4 <HAL_GetTick>
 800154c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001550:	f7ff fa28 	bl	80009a4 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e2c2      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001562:	4b95      	ldr	r3, [pc, #596]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80a9 	beq.w	80016ce <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157c:	4b8e      	ldr	r3, [pc, #568]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001584:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001586:	4b8c      	ldr	r3, [pc, #560]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b08      	cmp	r3, #8
 8001590:	d007      	beq.n	80015a2 <HAL_RCC_OscConfig+0x306>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b18      	cmp	r3, #24
 8001596:	d13a      	bne.n	800160e <HAL_RCC_OscConfig+0x372>
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d135      	bne.n	800160e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015a2:	4b85      	ldr	r3, [pc, #532]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x31e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	2b80      	cmp	r3, #128	; 0x80
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e296      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015ba:	f7ff fa23 	bl	8000a04 <HAL_GetREVID>
 80015be:	4603      	mov	r3, r0
 80015c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d817      	bhi.n	80015f8 <HAL_RCC_OscConfig+0x35c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	d108      	bne.n	80015e2 <HAL_RCC_OscConfig+0x346>
 80015d0:	4b79      	ldr	r3, [pc, #484]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80015d8:	4a77      	ldr	r2, [pc, #476]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 80015da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015de:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015e0:	e075      	b.n	80016ce <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015e2:	4b75      	ldr	r3, [pc, #468]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	069b      	lsls	r3, r3, #26
 80015f0:	4971      	ldr	r1, [pc, #452]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015f6:	e06a      	b.n	80016ce <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015f8:	4b6f      	ldr	r3, [pc, #444]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	496c      	ldr	r1, [pc, #432]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001608:	4313      	orrs	r3, r2
 800160a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800160c:	e05f      	b.n	80016ce <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d042      	beq.n	800169c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001616:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a67      	ldr	r2, [pc, #412]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff f9bf 	bl	80009a4 <HAL_GetTick>
 8001626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800162a:	f7ff f9bb 	bl	80009a4 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e255      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800163c:	4b5e      	ldr	r3, [pc, #376]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001648:	f7ff f9dc 	bl	8000a04 <HAL_GetREVID>
 800164c:	4603      	mov	r3, r0
 800164e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001652:	4293      	cmp	r3, r2
 8001654:	d817      	bhi.n	8001686 <HAL_RCC_OscConfig+0x3ea>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	2b20      	cmp	r3, #32
 800165c:	d108      	bne.n	8001670 <HAL_RCC_OscConfig+0x3d4>
 800165e:	4b56      	ldr	r3, [pc, #344]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001666:	4a54      	ldr	r2, [pc, #336]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800166c:	6053      	str	r3, [r2, #4]
 800166e:	e02e      	b.n	80016ce <HAL_RCC_OscConfig+0x432>
 8001670:	4b51      	ldr	r3, [pc, #324]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	069b      	lsls	r3, r3, #26
 800167e:	494e      	ldr	r1, [pc, #312]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e023      	b.n	80016ce <HAL_RCC_OscConfig+0x432>
 8001686:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	4948      	ldr	r1, [pc, #288]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001696:	4313      	orrs	r3, r2
 8001698:	60cb      	str	r3, [r1, #12]
 800169a:	e018      	b.n	80016ce <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800169c:	4b46      	ldr	r3, [pc, #280]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 80016a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff f97c 	bl	80009a4 <HAL_GetTick>
 80016ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016b0:	f7ff f978 	bl	80009a4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e212      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016c2:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d036      	beq.n	8001748 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d019      	beq.n	8001716 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 80016e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e6:	4a34      	ldr	r2, [pc, #208]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ee:	f7ff f959 	bl	80009a4 <HAL_GetTick>
 80016f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff f955 	bl	80009a4 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1ef      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001708:	4b2b      	ldr	r3, [pc, #172]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 800170a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x45a>
 8001714:	e018      	b.n	8001748 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171a:	4a27      	ldr	r2, [pc, #156]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001722:	f7ff f93f 	bl	80009a4 <HAL_GetTick>
 8001726:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172a:	f7ff f93b 	bl	80009a4 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e1d5      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 800173e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d039      	beq.n	80017c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d019      	beq.n	8001790 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001762:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001766:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001768:	f7ff f91c 	bl	80009a4 <HAL_GetTick>
 800176c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001770:	f7ff f918 	bl	80009a4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1b2      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x4d4>
 800178e:	e01b      	b.n	80017c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_RCC_OscConfig+0x51c>)
 8001796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800179a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800179c:	f7ff f902 	bl	80009a4 <HAL_GetTick>
 80017a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017a4:	f7ff f8fe 	bl	80009a4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d904      	bls.n	80017bc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e198      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
 80017b6:	bf00      	nop
 80017b8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017bc:	4ba3      	ldr	r3, [pc, #652]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ed      	bne.n	80017a4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8081 	beq.w	80018d8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80017d6:	4b9e      	ldr	r3, [pc, #632]	; (8001a50 <HAL_RCC_OscConfig+0x7b4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a9d      	ldr	r2, [pc, #628]	; (8001a50 <HAL_RCC_OscConfig+0x7b4>)
 80017dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80017e2:	f7ff f8df 	bl	80009a4 <HAL_GetTick>
 80017e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80017ea:	f7ff f8db 	bl	80009a4 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b64      	cmp	r3, #100	; 0x64
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e175      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017fc:	4b94      	ldr	r3, [pc, #592]	; (8001a50 <HAL_RCC_OscConfig+0x7b4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d106      	bne.n	800181e <HAL_RCC_OscConfig+0x582>
 8001810:	4b8e      	ldr	r3, [pc, #568]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a8d      	ldr	r2, [pc, #564]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6713      	str	r3, [r2, #112]	; 0x70
 800181c:	e02d      	b.n	800187a <HAL_RCC_OscConfig+0x5de>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x5a4>
 8001826:	4b89      	ldr	r3, [pc, #548]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a88      	ldr	r2, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
 8001832:	4b86      	ldr	r3, [pc, #536]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	4a85      	ldr	r2, [pc, #532]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6713      	str	r3, [r2, #112]	; 0x70
 800183e:	e01c      	b.n	800187a <HAL_RCC_OscConfig+0x5de>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b05      	cmp	r3, #5
 8001846:	d10c      	bne.n	8001862 <HAL_RCC_OscConfig+0x5c6>
 8001848:	4b80      	ldr	r3, [pc, #512]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 800184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184c:	4a7f      	ldr	r2, [pc, #508]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6713      	str	r3, [r2, #112]	; 0x70
 8001854:	4b7d      	ldr	r3, [pc, #500]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	4a7c      	ldr	r2, [pc, #496]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6713      	str	r3, [r2, #112]	; 0x70
 8001860:	e00b      	b.n	800187a <HAL_RCC_OscConfig+0x5de>
 8001862:	4b7a      	ldr	r3, [pc, #488]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001866:	4a79      	ldr	r2, [pc, #484]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
 800186e:	4b77      	ldr	r3, [pc, #476]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	4a76      	ldr	r2, [pc, #472]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001874:	f023 0304 	bic.w	r3, r3, #4
 8001878:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d015      	beq.n	80018ae <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001882:	f7ff f88f 	bl	80009a4 <HAL_GetTick>
 8001886:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001888:	e00a      	b.n	80018a0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff f88b 	bl	80009a4 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f241 3288 	movw	r2, #5000	; 0x1388
 8001898:	4293      	cmp	r3, r2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e123      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018a0:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0ee      	beq.n	800188a <HAL_RCC_OscConfig+0x5ee>
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ae:	f7ff f879 	bl	80009a4 <HAL_GetTick>
 80018b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018b4:	e00a      	b.n	80018cc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b6:	f7ff f875 	bl	80009a4 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e10d      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018cc:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80018ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ee      	bne.n	80018b6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8102 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80018e2:	4b5a      	ldr	r3, [pc, #360]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018ea:	2b18      	cmp	r3, #24
 80018ec:	f000 80bd 	beq.w	8001a6a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	f040 8095 	bne.w	8001a24 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a53      	ldr	r2, [pc, #332]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001904:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff f84d 	bl	80009a4 <HAL_GetTick>
 800190a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff f849 	bl	80009a4 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e0e3      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001920:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192c:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 800192e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001930:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <HAL_RCC_OscConfig+0x7b8>)
 8001932:	4013      	ands	r3, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800193c:	0112      	lsls	r2, r2, #4
 800193e:	430a      	orrs	r2, r1
 8001940:	4942      	ldr	r1, [pc, #264]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001942:	4313      	orrs	r3, r2
 8001944:	628b      	str	r3, [r1, #40]	; 0x28
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	3b01      	subs	r3, #1
 800194c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001954:	3b01      	subs	r3, #1
 8001956:	025b      	lsls	r3, r3, #9
 8001958:	b29b      	uxth	r3, r3
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001960:	3b01      	subs	r3, #1
 8001962:	041b      	lsls	r3, r3, #16
 8001964:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	3b01      	subs	r3, #1
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001976:	4935      	ldr	r1, [pc, #212]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001978:	4313      	orrs	r3, r2
 800197a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	4a32      	ldr	r2, [pc, #200]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001982:	f023 0301 	bic.w	r3, r3, #1
 8001986:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 800198a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198c:	4b32      	ldr	r3, [pc, #200]	; (8001a58 <HAL_RCC_OscConfig+0x7bc>)
 800198e:	4013      	ands	r3, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001994:	00d2      	lsls	r2, r2, #3
 8001996:	492d      	ldr	r1, [pc, #180]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001998:	4313      	orrs	r3, r2
 800199a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800199c:	4b2b      	ldr	r3, [pc, #172]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	f023 020c 	bic.w	r2, r3, #12
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4928      	ldr	r1, [pc, #160]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019ae:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	f023 0202 	bic.w	r2, r3, #2
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4924      	ldr	r1, [pc, #144]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	4a1b      	ldr	r2, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 80019f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7fe ffd2 	bl	80009a4 <HAL_GetTick>
 8001a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a04:	f7fe ffce 	bl	80009a4 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e068      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x768>
 8001a22:	e060      	b.n	8001ae6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_RCC_OscConfig+0x7b0>)
 8001a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7fe ffb8 	bl	80009a4 <HAL_GetTick>
 8001a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a36:	e011      	b.n	8001a5c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7fe ffb4 	bl	80009a4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d90a      	bls.n	8001a5c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e04e      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
 8001a4a:	bf00      	nop
 8001a4c:	58024400 	.word	0x58024400
 8001a50:	58024800 	.word	0x58024800
 8001a54:	fffffc0c 	.word	0xfffffc0c
 8001a58:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_RCC_OscConfig+0x854>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1e7      	bne.n	8001a38 <HAL_RCC_OscConfig+0x79c>
 8001a68:	e03d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_RCC_OscConfig+0x854>)
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_RCC_OscConfig+0x854>)
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d031      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	f003 0203 	and.w	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d12a      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	091b      	lsrs	r3, r3, #4
 8001a90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d122      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d11a      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	0a5b      	lsrs	r3, r3, #9
 8001ab0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d111      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	0c1b      	lsrs	r3, r3, #16
 8001ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d108      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	0e1b      	lsrs	r3, r3, #24
 8001ad4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001adc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d001      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3730      	adds	r7, #48	; 0x30
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	58024400 	.word	0x58024400

08001af4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e19c      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b08:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d910      	bls.n	8001b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b87      	ldr	r3, [pc, #540]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 020f 	bic.w	r2, r3, #15
 8001b1e:	4985      	ldr	r1, [pc, #532]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b83      	ldr	r3, [pc, #524]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e184      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	4b7b      	ldr	r3, [pc, #492]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d908      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b54:	4b78      	ldr	r3, [pc, #480]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	4975      	ldr	r1, [pc, #468]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d010      	beq.n	8001b94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	4b70      	ldr	r3, [pc, #448]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d908      	bls.n	8001b94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b82:	4b6d      	ldr	r3, [pc, #436]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	496a      	ldr	r1, [pc, #424]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d010      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	4b64      	ldr	r3, [pc, #400]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d908      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bb0:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	495e      	ldr	r1, [pc, #376]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0320 	and.w	r3, r3, #32
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d010      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d908      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001bde:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4953      	ldr	r1, [pc, #332]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	4b4d      	ldr	r3, [pc, #308]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d908      	bls.n	8001c1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f023 020f 	bic.w	r2, r3, #15
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	4947      	ldr	r1, [pc, #284]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d055      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4940      	ldr	r1, [pc, #256]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c44:	4b3c      	ldr	r3, [pc, #240]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d121      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0f6      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d115      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0ea      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0de      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c84:	4b2c      	ldr	r3, [pc, #176]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0d6      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	f023 0207 	bic.w	r2, r3, #7
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4925      	ldr	r1, [pc, #148]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca6:	f7fe fe7d 	bl	80009a4 <HAL_GetTick>
 8001caa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cae:	f7fe fe79 	bl	80009a4 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e0be      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d1eb      	bne.n	8001cae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d010      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d208      	bcs.n	8001d04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f023 020f 	bic.w	r2, r3, #15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	490e      	ldr	r1, [pc, #56]	; (8001d38 <HAL_RCC_ClockConfig+0x244>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d214      	bcs.n	8001d3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 020f 	bic.w	r2, r3, #15
 8001d1a:	4906      	ldr	r1, [pc, #24]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_RCC_ClockConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e086      	b.n	8001e42 <HAL_RCC_ClockConfig+0x34e>
 8001d34:	52002000 	.word	0x52002000
 8001d38:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d010      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d208      	bcs.n	8001d6a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d58:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4939      	ldr	r1, [pc, #228]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d010      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d208      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	492e      	ldr	r1, [pc, #184]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d010      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d208      	bcs.n	8001dc6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4922      	ldr	r1, [pc, #136]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d010      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d208      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	4917      	ldr	r1, [pc, #92]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001df4:	f000 f834 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	4912      	ldr	r1, [pc, #72]	; (8001e50 <HAL_RCC_ClockConfig+0x35c>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_RCC_ClockConfig+0x358>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <HAL_RCC_ClockConfig+0x35c>)
 8001e1c:	5cd3      	ldrb	r3, [r2, r3]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <HAL_RCC_ClockConfig+0x360>)
 8001e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_RCC_ClockConfig+0x364>)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_RCC_ClockConfig+0x368>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fd6a 	bl	8000910 <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	08002694 	.word	0x08002694
 8001e54:	24000004 	.word	0x24000004
 8001e58:	24000000 	.word	0x24000000
 8001e5c:	24000008 	.word	0x24000008

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e66:	4bb3      	ldr	r3, [pc, #716]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e6e:	2b18      	cmp	r3, #24
 8001e70:	f200 8155 	bhi.w	800211e <HAL_RCC_GetSysClockFreq+0x2be>
 8001e74:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7a:	bf00      	nop
 8001e7c:	08001ee1 	.word	0x08001ee1
 8001e80:	0800211f 	.word	0x0800211f
 8001e84:	0800211f 	.word	0x0800211f
 8001e88:	0800211f 	.word	0x0800211f
 8001e8c:	0800211f 	.word	0x0800211f
 8001e90:	0800211f 	.word	0x0800211f
 8001e94:	0800211f 	.word	0x0800211f
 8001e98:	0800211f 	.word	0x0800211f
 8001e9c:	08001f07 	.word	0x08001f07
 8001ea0:	0800211f 	.word	0x0800211f
 8001ea4:	0800211f 	.word	0x0800211f
 8001ea8:	0800211f 	.word	0x0800211f
 8001eac:	0800211f 	.word	0x0800211f
 8001eb0:	0800211f 	.word	0x0800211f
 8001eb4:	0800211f 	.word	0x0800211f
 8001eb8:	0800211f 	.word	0x0800211f
 8001ebc:	08001f0d 	.word	0x08001f0d
 8001ec0:	0800211f 	.word	0x0800211f
 8001ec4:	0800211f 	.word	0x0800211f
 8001ec8:	0800211f 	.word	0x0800211f
 8001ecc:	0800211f 	.word	0x0800211f
 8001ed0:	0800211f 	.word	0x0800211f
 8001ed4:	0800211f 	.word	0x0800211f
 8001ed8:	0800211f 	.word	0x0800211f
 8001edc:	08001f13 	.word	0x08001f13
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ee0:	4b94      	ldr	r3, [pc, #592]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d009      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001eec:	4b91      	ldr	r3, [pc, #580]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	4a90      	ldr	r2, [pc, #576]	; (8002138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8001efc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001efe:	e111      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f00:	4b8d      	ldr	r3, [pc, #564]	; (8002138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f02:	61bb      	str	r3, [r7, #24]
    break;
 8001f04:	e10e      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f06:	4b8d      	ldr	r3, [pc, #564]	; (800213c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f08:	61bb      	str	r3, [r7, #24]
    break;
 8001f0a:	e10b      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001f0c:	4b8c      	ldr	r3, [pc, #560]	; (8002140 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f0e:	61bb      	str	r3, [r7, #24]
    break;
 8001f10:	e108      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f12:	4b88      	ldr	r3, [pc, #544]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001f1c:	4b85      	ldr	r3, [pc, #532]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f26:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f28:	4b82      	ldr	r3, [pc, #520]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f32:	4b80      	ldr	r3, [pc, #512]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	08db      	lsrs	r3, r3, #3
 8001f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f4a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80e1 	beq.w	8002118 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	f000 8083 	beq.w	8002064 <HAL_RCC_GetSysClockFreq+0x204>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	f200 80a1 	bhi.w	80020a8 <HAL_RCC_GetSysClockFreq+0x248>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x114>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d056      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f72:	e099      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f74:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d02d      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f80:	4b6c      	ldr	r3, [pc, #432]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	08db      	lsrs	r3, r3, #3
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	4a6b      	ldr	r2, [pc, #428]	; (8002138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001faa:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fbe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001fda:	e087      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	ee07 3a90 	vmov	s15, r3
 8001fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002148 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fee:	4b51      	ldr	r3, [pc, #324]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002002:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800200e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800201e:	e065      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800214c <HAL_RCC_GetSysClockFreq+0x2ec>
 800202e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002032:	4b40      	ldr	r3, [pc, #256]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002042:	ed97 6a02 	vldr	s12, [r7, #8]
 8002046:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800204a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800204e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002062:	e043      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800206e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002150 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002076:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002086:	ed97 6a02 	vldr	s12, [r7, #8]
 800208a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800208e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800209a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020a6:	e021      	b.n	80020ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800214c <HAL_RCC_GetSysClockFreq+0x2ec>
 80020b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ce:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	0a5b      	lsrs	r3, r3, #9
 80020f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020f6:	3301      	adds	r3, #1
 80020f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002104:	edd7 6a07 	vldr	s13, [r7, #28]
 8002108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800210c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002110:	ee17 3a90 	vmov	r3, s15
 8002114:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002116:	e005      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
    break;
 800211c:	e002      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002120:	61bb      	str	r3, [r7, #24]
    break;
 8002122:	bf00      	nop
  }

  return sysclockfreq;
 8002124:	69bb      	ldr	r3, [r7, #24]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	58024400 	.word	0x58024400
 8002138:	03d09000 	.word	0x03d09000
 800213c:	003d0900 	.word	0x003d0900
 8002140:	017d7840 	.word	0x017d7840
 8002144:	46000000 	.word	0x46000000
 8002148:	4c742400 	.word	0x4c742400
 800214c:	4a742400 	.word	0x4a742400
 8002150:	4bbebc20 	.word	0x4bbebc20

08002154 <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 8002166:	bf00      	nop
 8002168:	201f      	movs	r0, #31
 800216a:	f7ff f80f 	bl	800118c <HAL_HSEM_FastTake>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f9      	bne.n	8002168 <ResMgr_Init+0x14>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 8002174:	4b42      	ldr	r3, [pc, #264]	; (8002280 <ResMgr_Init+0x12c>)
 8002176:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800217a:	2b5a      	cmp	r3, #90	; 0x5a
 800217c:	d062      	beq.n	8002244 <ResMgr_Init+0xf0>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 800217e:	e05a      	b.n	8002236 <ResMgr_Init+0xe2>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 8002180:	4a40      	ldr	r2, [pc, #256]	; (8002284 <ResMgr_Init+0x130>)
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4413      	add	r3, r2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d02a      	beq.n	80021e2 <ResMgr_Init+0x8e>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 800218c:	493c      	ldr	r1, [pc, #240]	; (8002280 <ResMgr_Init+0x12c>)
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3308      	adds	r3, #8
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 80021a0:	4a38      	ldr	r2, [pc, #224]	; (8002284 <ResMgr_Init+0x130>)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4413      	add	r3, r2
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d109      	bne.n	80021c0 <ResMgr_Init+0x6c>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 80021ac:	4934      	ldr	r1, [pc, #208]	; (8002280 <ResMgr_Init+0x12c>)
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	3304      	adds	r3, #4
 80021bc:	2208      	movs	r2, #8
 80021be:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 80021c0:	4a30      	ldr	r2, [pc, #192]	; (8002284 <ResMgr_Init+0x130>)
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d11e      	bne.n	800220a <ResMgr_Init+0xb6>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 80021cc:	492c      	ldr	r1, [pc, #176]	; (8002280 <ResMgr_Init+0x12c>)
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3304      	adds	r3, #4
 80021dc:	2210      	movs	r2, #16
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e013      	b.n	800220a <ResMgr_Init+0xb6>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 80021e2:	4927      	ldr	r1, [pc, #156]	; (8002280 <ResMgr_Init+0x12c>)
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3308      	adds	r3, #8
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 80021f6:	4922      	ldr	r1, [pc, #136]	; (8002280 <ResMgr_Init+0x12c>)
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	3304      	adds	r3, #4
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 800220a:	491d      	ldr	r1, [pc, #116]	; (8002280 <ResMgr_Init+0x12c>)
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 800221c:	4918      	ldr	r1, [pc, #96]	; (8002280 <ResMgr_Init+0x12c>)
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	3310      	adds	r3, #16
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3301      	adds	r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b12      	cmp	r3, #18
 800223a:	d9a1      	bls.n	8002180 <ResMgr_Init+0x2c>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <ResMgr_Init+0x12c>)
 800223e:	225a      	movs	r2, #90	; 0x5a
 8002240:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 8002244:	2100      	movs	r1, #0
 8002246:	201f      	movs	r0, #31
 8002248:	f7fe ffba 	bl	80011c0 <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <ResMgr_Init+0x104>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00c      	beq.n	8002272 <ResMgr_Init+0x11e>
  {
    ResMgrSendMsgFunct = SendFunct;
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <ResMgr_Init+0x134>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <ResMgr_Init+0x138>)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <ResMgr_Init+0x138>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2100      	movs	r1, #0
 800226a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800226e:	4798      	blx	r3
 8002270:	e001      	b.n	8002276 <ResMgr_Init+0x122>
  }
  else
  {
    ret = RESMGR_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	24000010 	.word	0x24000010
 8002284:	080026a4 	.word	0x080026a4
 8002288:	240001a8 	.word	0x240001a8
 800228c:	240001ac 	.word	0x240001ac

08002290 <ResMgr_Request>:
  * @param  prio: Request priority
  * @param  phandle: resource driver handle
  * @retval Status
  */
ResMgr_Status_t  ResMgr_Request ( uint32_t id, uint32_t flags, uint32_t prio, void *phandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]

  if(id < RESMGR_ENTRY_NBR)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b12      	cmp	r3, #18
 80022a6:	f200 80f6 	bhi.w	8002496 <ResMgr_Request+0x206>
  {
    /* lock table modification*/

    RESMGR_TBL_LOCK(id);
 80022aa:	bf00      	nop
 80022ac:	201f      	movs	r0, #31
 80022ae:	f7fe ff6d 	bl	800118c <HAL_HSEM_FastTake>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f9      	bne.n	80022ac <ResMgr_Request+0x1c>

    /* Check whether the resource is free */
    /* Or the resource is assigned by default to the current Core*/
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 80022b8:	497a      	ldr	r1, [pc, #488]	; (80024a4 <ResMgr_Request+0x214>)
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3308      	adds	r3, #8
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d019      	beq.n	8002302 <ResMgr_Request+0x72>
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 80022ce:	4975      	ldr	r1, [pc, #468]	; (80024a4 <ResMgr_Request+0x214>)
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3308      	adds	r3, #8
 80022de:	681b      	ldr	r3, [r3, #0]
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d165      	bne.n	80023b0 <ResMgr_Request+0x120>
        (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) == (flags & RESMGR_FLAGS_OWNER_MSK)))
 80022e4:	496f      	ldr	r1, [pc, #444]	; (80024a4 <ResMgr_Request+0x214>)
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4613      	mov	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3304      	adds	r3, #4
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	4053      	eors	r3, r2
 80022fa:	f003 0318 	and.w	r3, r3, #24
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d156      	bne.n	80023b0 <ResMgr_Request+0x120>
    {

      if(phandle != NULL)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d02c      	beq.n	8002362 <ResMgr_Request+0xd2>
      {
        if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01d      	beq.n	800234e <ResMgr_Request+0xbe>
        {
          if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 8002312:	4964      	ldr	r1, [pc, #400]	; (80024a4 <ResMgr_Request+0x214>)
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3310      	adds	r3, #16
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00c      	beq.n	8002342 <ResMgr_Request+0xb2>
          {
            *((uint32_t *)phandle) = (uint32_t ) (uint32_t *)ResMgr_Tbl[id].Ctx.pHandle;
 8002328:	495e      	ldr	r1, [pc, #376]	; (80024a4 <ResMgr_Request+0x214>)
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3310      	adds	r3, #16
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e00f      	b.n	8002362 <ResMgr_Request+0xd2>
          }
          else
          {
            RESMGR_TBL_UNLOCK(id);
 8002342:	2100      	movs	r1, #0
 8002344:	201f      	movs	r0, #31
 8002346:	f7fe ff3b 	bl	80011c0 <HAL_HSEM_Release>
            return  RESMGR_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0a6      	b.n	800249c <ResMgr_Request+0x20c>
          }
        }
        else
        {
          ResMgr_Tbl[id].Ctx.pHandle = phandle;
 800234e:	4955      	ldr	r1, [pc, #340]	; (80024a4 <ResMgr_Request+0x214>)
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4613      	mov	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3310      	adds	r3, #16
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	601a      	str	r2, [r3, #0]
        }
      }
      /* Resource free, update the table and send a message */
      ResMgr_Tbl[id].Ctx.Flags = (flags & ~RESMGR_FLAGS_ACCESS_MSK) | \
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f023 0306 	bic.w	r3, r3, #6
 8002368:	f043 0102 	orr.w	r1, r3, #2
 800236c:	484d      	ldr	r0, [pc, #308]	; (80024a4 <ResMgr_Request+0x214>)
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4403      	add	r3, r0
 800237a:	3304      	adds	r3, #4
 800237c:	6019      	str	r1, [r3, #0]
        RESMGR_FLAGS_ACCESS_NORMAL;

      ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_ASSIGNED;
 800237e:	4949      	ldr	r1, [pc, #292]	; (80024a4 <ResMgr_Request+0x214>)
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	3308      	adds	r3, #8
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]
      RESMGR_TBL_UNLOCK(id);
 8002392:	2100      	movs	r1, #0
 8002394:	201f      	movs	r0, #31
 8002396:	f7fe ff13 	bl	80011c0 <HAL_HSEM_Release>
      ResMgrSendMsgFunct(id, RESMGR_MSG_ASSIGN);
 800239a:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <ResMgr_Request+0x218>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2101      	movs	r1, #1
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	4798      	blx	r3
      ResMgrCallbackFunct(id, RESMGR_MSG_ASSIGNED);
 80023a4:	4b41      	ldr	r3, [pc, #260]	; (80024ac <ResMgr_Request+0x21c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2111      	movs	r1, #17
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	4798      	blx	r3
 80023ae:	e074      	b.n	800249a <ResMgr_Request+0x20a>
    }
    else  /* Resource already used, update the table and send a message */
    {
      ret = RESMGR_BUSY;
 80023b0:	2302      	movs	r3, #2
 80023b2:	75fb      	strb	r3, [r7, #23]

      /* is the request for normal access, reject*/
      if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_NORMAL)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 0306 	and.w	r3, r3, #6
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d10e      	bne.n	80023dc <ResMgr_Request+0x14c>
      {
        RESMGR_TBL_UNLOCK(id);
 80023be:	2100      	movs	r1, #0
 80023c0:	201f      	movs	r0, #31
 80023c2:	f7fe fefd 	bl	80011c0 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_REJECT);
 80023c6:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <ResMgr_Request+0x218>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2105      	movs	r1, #5
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_REJECTED);
 80023d0:	4b36      	ldr	r3, [pc, #216]	; (80024ac <ResMgr_Request+0x21c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2115      	movs	r1, #21
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	4798      	blx	r3
 80023da:	e05e      	b.n	800249a <ResMgr_Request+0x20a>
      }

      /* it is a pend request? */
      else if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_PEND)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f003 0306 	and.w	r3, r3, #6
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d154      	bne.n	8002490 <ResMgr_Request+0x200>
      {
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 80023e6:	492f      	ldr	r1, [pc, #188]	; (80024a4 <ResMgr_Request+0x214>)
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4613      	mov	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	3304      	adds	r3, #4
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0218 	and.w	r2, r3, #24
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f023 0306 	bic.w	r3, r3, #6
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 8002402:	4313      	orrs	r3, r2
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 8002404:	f043 0104 	orr.w	r1, r3, #4
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 8002408:	4826      	ldr	r0, [pc, #152]	; (80024a4 <ResMgr_Request+0x214>)
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4403      	add	r3, r0
 8002416:	3304      	adds	r3, #4
 8002418:	6019      	str	r1, [r3, #0]

        if(phandle != NULL)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d028      	beq.n	8002472 <ResMgr_Request+0x1e2>
        {
          if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d019      	beq.n	800245e <ResMgr_Request+0x1ce>
          {
            if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 800242a:	491e      	ldr	r1, [pc, #120]	; (80024a4 <ResMgr_Request+0x214>)
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3310      	adds	r3, #16
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00c      	beq.n	800245a <ResMgr_Request+0x1ca>
            {
              *((uint32_t *)phandle) = (uint32_t )(uint32_t *) ResMgr_Tbl[id].Ctx.pHandle;
 8002440:	4918      	ldr	r1, [pc, #96]	; (80024a4 <ResMgr_Request+0x214>)
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3310      	adds	r3, #16
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	e00b      	b.n	8002472 <ResMgr_Request+0x1e2>
            }
            else
            {
              return  RESMGR_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e01e      	b.n	800249c <ResMgr_Request+0x20c>
            }
          }
          else
          {
            ResMgr_Tbl[id].Ctx.pHandle = phandle;
 800245e:	4911      	ldr	r1, [pc, #68]	; (80024a4 <ResMgr_Request+0x214>)
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	3310      	adds	r3, #16
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	601a      	str	r2, [r3, #0]
          }
        }
        RESMGR_TBL_UNLOCK(id);
 8002472:	2100      	movs	r1, #0
 8002474:	201f      	movs	r0, #31
 8002476:	f7fe fea3 	bl	80011c0 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_PEND);
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <ResMgr_Request+0x218>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2104      	movs	r1, #4
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_PENDED);
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <ResMgr_Request+0x21c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2114      	movs	r1, #20
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	4798      	blx	r3
 800248e:	e004      	b.n	800249a <ResMgr_Request+0x20a>
      }
      else
      {
        ret = RESMGR_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	75fb      	strb	r3, [r7, #23]
 8002494:	e001      	b.n	800249a <ResMgr_Request+0x20a>
    }

  }
  else
  {
    ret = RESMGR_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800249a:	7dfb      	ldrb	r3, [r7, #23]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	24000010 	.word	0x24000010
 80024a8:	240001a8 	.word	0x240001a8
 80024ac:	240001ac 	.word	0x240001ac

080024b0 <ResMgr_Release>:
  * @brief  Release the resource
  * @param  id: Resource identifier
  * @retval Status
  */
ResMgr_Status_t  ResMgr_Release ( uint32_t id, uint32_t flags)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]

  if(id < RESMGR_ENTRY_NBR)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b12      	cmp	r3, #18
 80024c2:	f200 80a2 	bhi.w	800260a <ResMgr_Release+0x15a>
  {
    /* lock table modification */
    RESMGR_TBL_LOCK(id);
 80024c6:	bf00      	nop
 80024c8:	201f      	movs	r0, #31
 80024ca:	f7fe fe5f 	bl	800118c <HAL_HSEM_FastTake>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f9      	bne.n	80024c8 <ResMgr_Release+0x18>
    /* Check whether the resource is free */
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) && \
 80024d4:	4950      	ldr	r1, [pc, #320]	; (8002618 <ResMgr_Release+0x168>)
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	3308      	adds	r3, #8
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	f040 8085 	bne.w	80025f6 <ResMgr_Release+0x146>
      ((ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) & (flags & RESMGR_FLAGS_OWNER_MSK)) != 0)
 80024ec:	494a      	ldr	r1, [pc, #296]	; (8002618 <ResMgr_Release+0x168>)
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3304      	adds	r3, #4
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	4013      	ands	r3, r2
 8002502:	f003 0318 	and.w	r3, r3, #24
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) && \
 8002506:	2b00      	cmp	r3, #0
 8002508:	d075      	beq.n	80025f6 <ResMgr_Release+0x146>
    {
      if((ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_PEND)
 800250a:	4943      	ldr	r1, [pc, #268]	; (8002618 <ResMgr_Release+0x168>)
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3304      	adds	r3, #4
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0306 	and.w	r3, r3, #6
 8002520:	2b04      	cmp	r3, #4
 8002522:	d140      	bne.n	80025a6 <ResMgr_Release+0xf6>
      {
        /* Another task is waiting for the resource ?*/
        ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_ASSIGNED;
 8002524:	493c      	ldr	r1, [pc, #240]	; (8002618 <ResMgr_Release+0x168>)
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3308      	adds	r3, #8
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[id].Ctx.Flags &=~RESMGR_FLAGS_ACCESS_MSK;
 8002538:	4937      	ldr	r1, [pc, #220]	; (8002618 <ResMgr_Release+0x168>)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3304      	adds	r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0106 	bic.w	r1, r3, #6
 800254e:	4832      	ldr	r0, [pc, #200]	; (8002618 <ResMgr_Release+0x168>)
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4403      	add	r3, r0
 800255c:	3304      	adds	r3, #4
 800255e:	6019      	str	r1, [r3, #0]
        ResMgr_Tbl[id].Ctx.Flags |= RESMGR_FLAGS_ACCESS_NORMAL;
 8002560:	492d      	ldr	r1, [pc, #180]	; (8002618 <ResMgr_Release+0x168>)
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3304      	adds	r3, #4
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f043 0102 	orr.w	r1, r3, #2
 8002576:	4828      	ldr	r0, [pc, #160]	; (8002618 <ResMgr_Release+0x168>)
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4403      	add	r3, r0
 8002584:	3304      	adds	r3, #4
 8002586:	6019      	str	r1, [r3, #0]
        RESMGR_TBL_UNLOCK(id);
 8002588:	2100      	movs	r1, #0
 800258a:	201f      	movs	r0, #31
 800258c:	f7fe fe18 	bl	80011c0 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_PEND_ASSIGN);
 8002590:	4b22      	ldr	r3, [pc, #136]	; (800261c <ResMgr_Release+0x16c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2103      	movs	r1, #3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_PEND_ASSIGNED);
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <ResMgr_Release+0x170>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2113      	movs	r1, #19
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	4798      	blx	r3
 80025a4:	e027      	b.n	80025f6 <ResMgr_Release+0x146>
      }
      else if((ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_NORMAL)
 80025a6:	491c      	ldr	r1, [pc, #112]	; (8002618 <ResMgr_Release+0x168>)
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	3304      	adds	r3, #4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0306 	and.w	r3, r3, #6
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d118      	bne.n	80025f2 <ResMgr_Release+0x142>
      {
        ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_RELEASED;
 80025c0:	4915      	ldr	r1, [pc, #84]	; (8002618 <ResMgr_Release+0x168>)
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3308      	adds	r3, #8
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
        RESMGR_TBL_UNLOCK(id);
 80025d4:	2100      	movs	r1, #0
 80025d6:	201f      	movs	r0, #31
 80025d8:	f7fe fdf2 	bl	80011c0 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_RELEASE);
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <ResMgr_Release+0x16c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2102      	movs	r1, #2
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_RELEASED);
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <ResMgr_Release+0x170>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2112      	movs	r1, #18
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
 80025f0:	e001      	b.n	80025f6 <ResMgr_Release+0x146>
      }
      else
      {
        return  RESMGR_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00c      	b.n	8002610 <ResMgr_Release+0x160>
      }
    }
    ResMgr_Tbl[id].Spinlock = 0;
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <ResMgr_Release+0x168>)
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e001      	b.n	800260e <ResMgr_Release+0x15e>
  }
  else
  {
    ret = RESMGR_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	24000010 	.word	0x24000010
 800261c:	240001a8 	.word	0x240001a8
 8002620:	240001ac 	.word	0x240001ac

08002624 <__libc_init_array>:
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	4d0d      	ldr	r5, [pc, #52]	; (800265c <__libc_init_array+0x38>)
 8002628:	4c0d      	ldr	r4, [pc, #52]	; (8002660 <__libc_init_array+0x3c>)
 800262a:	1b64      	subs	r4, r4, r5
 800262c:	10a4      	asrs	r4, r4, #2
 800262e:	2600      	movs	r6, #0
 8002630:	42a6      	cmp	r6, r4
 8002632:	d109      	bne.n	8002648 <__libc_init_array+0x24>
 8002634:	4d0b      	ldr	r5, [pc, #44]	; (8002664 <__libc_init_array+0x40>)
 8002636:	4c0c      	ldr	r4, [pc, #48]	; (8002668 <__libc_init_array+0x44>)
 8002638:	f000 f820 	bl	800267c <_init>
 800263c:	1b64      	subs	r4, r4, r5
 800263e:	10a4      	asrs	r4, r4, #2
 8002640:	2600      	movs	r6, #0
 8002642:	42a6      	cmp	r6, r4
 8002644:	d105      	bne.n	8002652 <__libc_init_array+0x2e>
 8002646:	bd70      	pop	{r4, r5, r6, pc}
 8002648:	f855 3b04 	ldr.w	r3, [r5], #4
 800264c:	4798      	blx	r3
 800264e:	3601      	adds	r6, #1
 8002650:	e7ee      	b.n	8002630 <__libc_init_array+0xc>
 8002652:	f855 3b04 	ldr.w	r3, [r5], #4
 8002656:	4798      	blx	r3
 8002658:	3601      	adds	r6, #1
 800265a:	e7f2      	b.n	8002642 <__libc_init_array+0x1e>
 800265c:	080026b8 	.word	0x080026b8
 8002660:	080026b8 	.word	0x080026b8
 8002664:	080026b8 	.word	0x080026b8
 8002668:	080026bc 	.word	0x080026bc

0800266c <memset>:
 800266c:	4402      	add	r2, r0
 800266e:	4603      	mov	r3, r0
 8002670:	4293      	cmp	r3, r2
 8002672:	d100      	bne.n	8002676 <memset+0xa>
 8002674:	4770      	bx	lr
 8002676:	f803 1b01 	strb.w	r1, [r3], #1
 800267a:	e7f9      	b.n	8002670 <memset+0x4>

0800267c <_init>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	bf00      	nop
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr

08002688 <_fini>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr


test_pwr_sleep_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001668  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08101900  08101900  00011900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101924  08101924  00011924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08101928  08101928  00011928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  0810192c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RAM_D3       0000017c  10000010  0810193c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000028  1000018c  08101ab8  0002018c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100001b4  08101ab8  000201b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f556  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000210b  00000000  00000000  0002f712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000748  00000000  00000000  00031820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000680  00000000  00000000  00031f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003788b  00000000  00000000  000325e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00008f02  00000000  00000000  00069e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ebf1  00000000  00000000  00072d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e1966  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001b38  00000000  00000000  001e19bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000018c 	.word	0x1000018c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081018e8 	.word	0x081018e8

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000190 	.word	0x10000190
 81002d4:	081018e8 	.word	0x081018e8

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b0b      	ldr	r3, [pc, #44]	; (810030c <SystemInit+0x34>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a0a      	ldr	r2, [pc, #40]	; (810030c <SystemInit+0x34>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b07      	ldr	r3, [pc, #28]	; (810030c <SystemInit+0x34>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a06      	ldr	r2, [pc, #24]	; (810030c <SystemInit+0x34>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81002f8:	4b04      	ldr	r3, [pc, #16]	; (810030c <SystemInit+0x34>)
 81002fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81002fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b088      	sub	sp, #32
 8100314:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100316:	4b3e      	ldr	r3, [pc, #248]	; (8100410 <main+0x100>)
 8100318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810031c:	4a3c      	ldr	r2, [pc, #240]	; (8100410 <main+0x100>)
 810031e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100326:	4b3a      	ldr	r3, [pc, #232]	; (8100410 <main+0x100>)
 8100328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810032c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100330:	61bb      	str	r3, [r7, #24]
 8100332:	69bb      	ldr	r3, [r7, #24]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100334:	2001      	movs	r0, #1
 8100336:	f000 fe37 	bl	8100fa8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810033a:	f000 fec1 	bl	81010c0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810033e:	2201      	movs	r2, #1
 8100340:	2102      	movs	r1, #2
 8100342:	2000      	movs	r0, #0
 8100344:	f000 fe42 	bl	8100fcc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100348:	4b32      	ldr	r3, [pc, #200]	; (8100414 <main+0x104>)
 810034a:	681b      	ldr	r3, [r3, #0]
 810034c:	091b      	lsrs	r3, r3, #4
 810034e:	f003 030f 	and.w	r3, r3, #15
 8100352:	2b07      	cmp	r3, #7
 8100354:	d108      	bne.n	8100368 <main+0x58>
 8100356:	4b30      	ldr	r3, [pc, #192]	; (8100418 <main+0x108>)
 8100358:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810035c:	4a2e      	ldr	r2, [pc, #184]	; (8100418 <main+0x108>)
 810035e:	f043 0301 	orr.w	r3, r3, #1
 8100362:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100366:	e007      	b.n	8100378 <main+0x68>
 8100368:	4b2b      	ldr	r3, [pc, #172]	; (8100418 <main+0x108>)
 810036a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810036e:	4a2a      	ldr	r2, [pc, #168]	; (8100418 <main+0x108>)
 8100370:	f043 0301 	orr.w	r3, r3, #1
 8100374:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100378:	f000 f944 	bl	8100604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Resource Manager Utility initialisation ---------------------------------*/
  MX_RESMGR_UTILITY_Init();
 810037c:	f000 f856 	bl	810042c <MX_RESMGR_UTILITY_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status = RESMGR_BUSY;
 8100380:	2302      	movs	r3, #2
 8100382:	77fb      	strb	r3, [r7, #31]
	  while (status == RESMGR_BUSY)
 8100384:	e007      	b.n	8100396 <main+0x86>
	  {
		 status = ResMgr_Request(RESMGR_ID_GPIOB, RESMGR_FLAGS_CPU2 , 0, NULL);
 8100386:	2300      	movs	r3, #0
 8100388:	2200      	movs	r2, #0
 810038a:	2110      	movs	r1, #16
 810038c:	2008      	movs	r0, #8
 810038e:	f001 f8bd 	bl	810150c <ResMgr_Request>
 8100392:	4603      	mov	r3, r0
 8100394:	77fb      	strb	r3, [r7, #31]
	  while (status == RESMGR_BUSY)
 8100396:	7ffb      	ldrb	r3, [r7, #31]
 8100398:	2b02      	cmp	r3, #2
 810039a:	d0f4      	beq.n	8100386 <main+0x76>
	  }


	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 810039c:	1d3b      	adds	r3, r7, #4
 810039e:	2200      	movs	r2, #0
 81003a0:	601a      	str	r2, [r3, #0]
 81003a2:	605a      	str	r2, [r3, #4]
 81003a4:	609a      	str	r2, [r3, #8]
 81003a6:	60da      	str	r2, [r3, #12]
 81003a8:	611a      	str	r2, [r3, #16]

	    /* GPIO Ports Clock Enable */
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 81003aa:	4b19      	ldr	r3, [pc, #100]	; (8100410 <main+0x100>)
 81003ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003b0:	4a17      	ldr	r2, [pc, #92]	; (8100410 <main+0x100>)
 81003b2:	f043 0302 	orr.w	r3, r3, #2
 81003b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81003ba:	4b15      	ldr	r3, [pc, #84]	; (8100410 <main+0x100>)
 81003bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81003c0:	f003 0302 	and.w	r3, r3, #2
 81003c4:	603b      	str	r3, [r7, #0]
 81003c6:	683b      	ldr	r3, [r7, #0]

	    /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 81003c8:	2201      	movs	r2, #1
 81003ca:	2101      	movs	r1, #1
 81003cc:	4813      	ldr	r0, [pc, #76]	; (810041c <main+0x10c>)
 81003ce:	f000 fda3 	bl	8100f18 <HAL_GPIO_WritePin>

	    /*Configure GPIO pin : PtPin */
	    GPIO_InitStruct.Pin = LED_Pin;
 81003d2:	2301      	movs	r3, #1
 81003d4:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81003d6:	2301      	movs	r3, #1
 81003d8:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81003da:	2300      	movs	r3, #0
 81003dc:	60fb      	str	r3, [r7, #12]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81003de:	2300      	movs	r3, #0
 81003e0:	613b      	str	r3, [r7, #16]
	    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 81003e2:	1d3b      	adds	r3, r7, #4
 81003e4:	4619      	mov	r1, r3
 81003e6:	480d      	ldr	r0, [pc, #52]	; (810041c <main+0x10c>)
 81003e8:	f000 fadc 	bl	81009a4 <HAL_GPIO_Init>


	    HAL_Delay(10000);
 81003ec:	f242 7010 	movw	r0, #10000	; 0x2710
 81003f0:	f000 f9bc 	bl	810076c <HAL_Delay>
	    HAL_GPIO_DeInit(LED_GPIO_Port, LED_Pin);
 81003f4:	2101      	movs	r1, #1
 81003f6:	4809      	ldr	r0, [pc, #36]	; (810041c <main+0x10c>)
 81003f8:	f000 fc84 	bl	8100d04 <HAL_GPIO_DeInit>

	    ResMgr_Release(RESMGR_ID_GPIOB, RESMGR_FLAGS_CPU2);
 81003fc:	2110      	movs	r1, #16
 81003fe:	2008      	movs	r0, #8
 8100400:	f001 f994 	bl	810172c <ResMgr_Release>

	    HAL_Delay(1000);
 8100404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100408:	f000 f9b0 	bl	810076c <HAL_Delay>
  {
 810040c:	e7b8      	b.n	8100380 <main+0x70>
 810040e:	bf00      	nop
 8100410:	58024400 	.word	0x58024400
 8100414:	e000ed00 	.word	0xe000ed00
 8100418:	58026400 	.word	0x58026400
 810041c:	58020400 	.word	0x58020400

08100420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100420:	b480      	push	{r7}
 8100422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100424:	b672      	cpsid	i
}
 8100426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100428:	e7fe      	b.n	8100428 <Error_Handler+0x8>
	...

0810042c <MX_RESMGR_UTILITY_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* RESMGR_UTILITY init function */
void MX_RESMGR_UTILITY_Init(void)
{
 810042c:	b580      	push	{r7, lr}
 810042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  if (ResMgr_Init(MX_RESMGR_UTILITY_SendMsg, MX_RESMGR_UTILITY_Callback) != RESMGR_OK)
 8100430:	4905      	ldr	r1, [pc, #20]	; (8100448 <MX_RESMGR_UTILITY_Init+0x1c>)
 8100432:	4806      	ldr	r0, [pc, #24]	; (810044c <MX_RESMGR_UTILITY_Init+0x20>)
 8100434:	f000 ffcc 	bl	81013d0 <ResMgr_Init>
 8100438:	4603      	mov	r3, r0
 810043a:	2b00      	cmp	r3, #0
 810043c:	d001      	beq.n	8100442 <MX_RESMGR_UTILITY_Init+0x16>
  {
    Error_Handler();
 810043e:	f7ff ffef 	bl	8100420 <Error_Handler>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8100442:	bf00      	nop
 8100444:	bd80      	pop	{r7, pc}
 8100446:	bf00      	nop
 8100448:	0810049d 	.word	0x0810049d
 810044c:	08100451 	.word	0x08100451

08100450 <MX_RESMGR_UTILITY_SendMsg>:

/* Resource Manager send message function */
__weak void MX_RESMGR_UTILITY_SendMsg(uint32_t id, uint32_t msg)
{
 8100450:	b480      	push	{r7}
 8100452:	b083      	sub	sp, #12
 8100454:	af00      	add	r7, sp, #0
 8100456:	6078      	str	r0, [r7, #4]
 8100458:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 4 */
    switch (msg)
 810045a:	683b      	ldr	r3, [r7, #0]
 810045c:	2b05      	cmp	r3, #5
 810045e:	d811      	bhi.n	8100484 <MX_RESMGR_UTILITY_SendMsg+0x34>
 8100460:	683b      	ldr	r3, [r7, #0]
 8100462:	2b05      	cmp	r3, #5
 8100464:	d811      	bhi.n	810048a <MX_RESMGR_UTILITY_SendMsg+0x3a>
 8100466:	a201      	add	r2, pc, #4	; (adr r2, 810046c <MX_RESMGR_UTILITY_SendMsg+0x1c>)
 8100468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810046c:	0810048b 	.word	0x0810048b
 8100470:	0810048b 	.word	0x0810048b
 8100474:	0810048b 	.word	0x0810048b
 8100478:	0810048b 	.word	0x0810048b
 810047c:	0810048b 	.word	0x0810048b
 8100480:	0810048b 	.word	0x0810048b
 8100484:	683b      	ldr	r3, [r7, #0]
 8100486:	2bff      	cmp	r3, #255	; 0xff
 8100488:	d001      	beq.n	810048e <MX_RESMGR_UTILITY_SendMsg+0x3e>
        case RESMGR_MSG_REJECT:
            //User Code
            break;

        default:
            break;
 810048a:	bf00      	nop
 810048c:	e000      	b.n	8100490 <MX_RESMGR_UTILITY_SendMsg+0x40>
            break;
 810048e:	bf00      	nop
    }
      /* USER CODE END 4 */

    return;
 8100490:	bf00      	nop
}
 8100492:	370c      	adds	r7, #12
 8100494:	46bd      	mov	sp, r7
 8100496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810049a:	4770      	bx	lr

0810049c <MX_RESMGR_UTILITY_Callback>:

/* Resource Manager callback function */
__weak void MX_RESMGR_UTILITY_Callback(uint32_t id, uint32_t msg)
{
 810049c:	b480      	push	{r7}
 810049e:	b083      	sub	sp, #12
 81004a0:	af00      	add	r7, sp, #0
 81004a2:	6078      	str	r0, [r7, #4]
 81004a4:	6039      	str	r1, [r7, #0]
      /* USER CODE BEGIN 5 */
    switch (msg)
 81004a6:	683b      	ldr	r3, [r7, #0]
 81004a8:	2b15      	cmp	r3, #21
 81004aa:	d831      	bhi.n	8100510 <MX_RESMGR_UTILITY_Callback+0x74>
 81004ac:	683b      	ldr	r3, [r7, #0]
 81004ae:	2b15      	cmp	r3, #21
 81004b0:	d831      	bhi.n	8100516 <MX_RESMGR_UTILITY_Callback+0x7a>
 81004b2:	a201      	add	r2, pc, #4	; (adr r2, 81004b8 <MX_RESMGR_UTILITY_Callback+0x1c>)
 81004b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81004b8:	08100517 	.word	0x08100517
 81004bc:	08100517 	.word	0x08100517
 81004c0:	08100517 	.word	0x08100517
 81004c4:	08100517 	.word	0x08100517
 81004c8:	08100517 	.word	0x08100517
 81004cc:	08100517 	.word	0x08100517
 81004d0:	08100517 	.word	0x08100517
 81004d4:	08100517 	.word	0x08100517
 81004d8:	08100517 	.word	0x08100517
 81004dc:	08100517 	.word	0x08100517
 81004e0:	08100517 	.word	0x08100517
 81004e4:	08100517 	.word	0x08100517
 81004e8:	08100517 	.word	0x08100517
 81004ec:	08100517 	.word	0x08100517
 81004f0:	08100517 	.word	0x08100517
 81004f4:	08100517 	.word	0x08100517
 81004f8:	08100517 	.word	0x08100517
 81004fc:	08100517 	.word	0x08100517
 8100500:	08100517 	.word	0x08100517
 8100504:	08100517 	.word	0x08100517
 8100508:	08100517 	.word	0x08100517
 810050c:	08100517 	.word	0x08100517
 8100510:	683b      	ldr	r3, [r7, #0]
 8100512:	2bff      	cmp	r3, #255	; 0xff
 8100514:	d001      	beq.n	810051a <MX_RESMGR_UTILITY_Callback+0x7e>
        case RESMGR_MSG_REJECTED:
            //User Code
            break;

        default:
            break;
 8100516:	bf00      	nop
 8100518:	e000      	b.n	810051c <MX_RESMGR_UTILITY_Callback+0x80>
            break;
 810051a:	bf00      	nop
    }
      /* USER CODE END 5 */

    return;
 810051c:	bf00      	nop
}
 810051e:	370c      	adds	r7, #12
 8100520:	46bd      	mov	sp, r7
 8100522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100526:	4770      	bx	lr

08100528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100528:	b480      	push	{r7}
 810052a:	b083      	sub	sp, #12
 810052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810052e:	4b0a      	ldr	r3, [pc, #40]	; (8100558 <HAL_MspInit+0x30>)
 8100530:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100534:	4a08      	ldr	r2, [pc, #32]	; (8100558 <HAL_MspInit+0x30>)
 8100536:	f043 0302 	orr.w	r3, r3, #2
 810053a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810053e:	4b06      	ldr	r3, [pc, #24]	; (8100558 <HAL_MspInit+0x30>)
 8100540:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100544:	f003 0302 	and.w	r3, r3, #2
 8100548:	607b      	str	r3, [r7, #4]
 810054a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810054c:	bf00      	nop
 810054e:	370c      	adds	r7, #12
 8100550:	46bd      	mov	sp, r7
 8100552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100556:	4770      	bx	lr
 8100558:	58024400 	.word	0x58024400

0810055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810055c:	b480      	push	{r7}
 810055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100560:	e7fe      	b.n	8100560 <NMI_Handler+0x4>

08100562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100562:	b480      	push	{r7}
 8100564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100566:	e7fe      	b.n	8100566 <HardFault_Handler+0x4>

08100568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100568:	b480      	push	{r7}
 810056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810056c:	e7fe      	b.n	810056c <MemManage_Handler+0x4>

0810056e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810056e:	b480      	push	{r7}
 8100570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100572:	e7fe      	b.n	8100572 <BusFault_Handler+0x4>

08100574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100574:	b480      	push	{r7}
 8100576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100578:	e7fe      	b.n	8100578 <UsageFault_Handler+0x4>

0810057a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810057a:	b480      	push	{r7}
 810057c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810057e:	bf00      	nop
 8100580:	46bd      	mov	sp, r7
 8100582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100586:	4770      	bx	lr

08100588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100588:	b480      	push	{r7}
 810058a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810058c:	bf00      	nop
 810058e:	46bd      	mov	sp, r7
 8100590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100594:	4770      	bx	lr

08100596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100596:	b480      	push	{r7}
 8100598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810059a:	bf00      	nop
 810059c:	46bd      	mov	sp, r7
 810059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005a2:	4770      	bx	lr

081005a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81005a4:	b580      	push	{r7, lr}
 81005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81005a8:	f000 f8c0 	bl	810072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81005ac:	bf00      	nop
 81005ae:	bd80      	pop	{r7, pc}

081005b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 81005e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81005b4:	f7ff fe90 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81005b8:	480c      	ldr	r0, [pc, #48]	; (81005ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81005ba:	490d      	ldr	r1, [pc, #52]	; (81005f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81005bc:	4a0d      	ldr	r2, [pc, #52]	; (81005f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81005c0:	e002      	b.n	81005c8 <LoopCopyDataInit>

081005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81005c6:	3304      	adds	r3, #4

081005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81005cc:	d3f9      	bcc.n	81005c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81005ce:	4a0a      	ldr	r2, [pc, #40]	; (81005f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81005d0:	4c0a      	ldr	r4, [pc, #40]	; (81005fc <LoopFillZerobss+0x22>)
  movs r3, #0
 81005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81005d4:	e001      	b.n	81005da <LoopFillZerobss>

081005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81005d8:	3204      	adds	r2, #4

081005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81005dc:	d3fb      	bcc.n	81005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81005de:	f001 f95f 	bl	81018a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81005e2:	f7ff fe95 	bl	8100310 <main>
  bx  lr
 81005e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81005e8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81005ec:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81005f0:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81005f4:	0810192c 	.word	0x0810192c
  ldr r2, =_sbss
 81005f8:	1000018c 	.word	0x1000018c
  ldr r4, =_ebss
 81005fc:	100001b4 	.word	0x100001b4

08100600 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100600:	e7fe      	b.n	8100600 <ADC3_IRQHandler>
	...

08100604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100604:	b580      	push	{r7, lr}
 8100606:	b082      	sub	sp, #8
 8100608:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810060a:	4b28      	ldr	r3, [pc, #160]	; (81006ac <HAL_Init+0xa8>)
 810060c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100610:	4a26      	ldr	r2, [pc, #152]	; (81006ac <HAL_Init+0xa8>)
 8100612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100616:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810061a:	4b24      	ldr	r3, [pc, #144]	; (81006ac <HAL_Init+0xa8>)
 810061c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100624:	603b      	str	r3, [r7, #0]
 8100626:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100628:	4b21      	ldr	r3, [pc, #132]	; (81006b0 <HAL_Init+0xac>)
 810062a:	681b      	ldr	r3, [r3, #0]
 810062c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100630:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100634:	4a1e      	ldr	r2, [pc, #120]	; (81006b0 <HAL_Init+0xac>)
 8100636:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810063a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810063c:	4b1c      	ldr	r3, [pc, #112]	; (81006b0 <HAL_Init+0xac>)
 810063e:	681b      	ldr	r3, [r3, #0]
 8100640:	4a1b      	ldr	r2, [pc, #108]	; (81006b0 <HAL_Init+0xac>)
 8100642:	f043 0301 	orr.w	r3, r3, #1
 8100646:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100648:	2003      	movs	r0, #3
 810064a:	f000 f965 	bl	8100918 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810064e:	f000 fd45 	bl	81010dc <HAL_RCC_GetSysClockFreq>
 8100652:	4602      	mov	r2, r0
 8100654:	4b15      	ldr	r3, [pc, #84]	; (81006ac <HAL_Init+0xa8>)
 8100656:	699b      	ldr	r3, [r3, #24]
 8100658:	0a1b      	lsrs	r3, r3, #8
 810065a:	f003 030f 	and.w	r3, r3, #15
 810065e:	4915      	ldr	r1, [pc, #84]	; (81006b4 <HAL_Init+0xb0>)
 8100660:	5ccb      	ldrb	r3, [r1, r3]
 8100662:	f003 031f 	and.w	r3, r3, #31
 8100666:	fa22 f303 	lsr.w	r3, r2, r3
 810066a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810066c:	4b0f      	ldr	r3, [pc, #60]	; (81006ac <HAL_Init+0xa8>)
 810066e:	699b      	ldr	r3, [r3, #24]
 8100670:	f003 030f 	and.w	r3, r3, #15
 8100674:	4a0f      	ldr	r2, [pc, #60]	; (81006b4 <HAL_Init+0xb0>)
 8100676:	5cd3      	ldrb	r3, [r2, r3]
 8100678:	f003 031f 	and.w	r3, r3, #31
 810067c:	687a      	ldr	r2, [r7, #4]
 810067e:	fa22 f303 	lsr.w	r3, r2, r3
 8100682:	4a0d      	ldr	r2, [pc, #52]	; (81006b8 <HAL_Init+0xb4>)
 8100684:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100686:	4b0c      	ldr	r3, [pc, #48]	; (81006b8 <HAL_Init+0xb4>)
 8100688:	681b      	ldr	r3, [r3, #0]
 810068a:	4a0c      	ldr	r2, [pc, #48]	; (81006bc <HAL_Init+0xb8>)
 810068c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810068e:	200f      	movs	r0, #15
 8100690:	f000 f816 	bl	81006c0 <HAL_InitTick>
 8100694:	4603      	mov	r3, r0
 8100696:	2b00      	cmp	r3, #0
 8100698:	d001      	beq.n	810069e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810069a:	2301      	movs	r3, #1
 810069c:	e002      	b.n	81006a4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810069e:	f7ff ff43 	bl	8100528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81006a2:	2300      	movs	r3, #0
}
 81006a4:	4618      	mov	r0, r3
 81006a6:	3708      	adds	r7, #8
 81006a8:	46bd      	mov	sp, r7
 81006aa:	bd80      	pop	{r7, pc}
 81006ac:	58024400 	.word	0x58024400
 81006b0:	40024400 	.word	0x40024400
 81006b4:	08101900 	.word	0x08101900
 81006b8:	10000004 	.word	0x10000004
 81006bc:	10000000 	.word	0x10000000

081006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81006c0:	b580      	push	{r7, lr}
 81006c2:	b082      	sub	sp, #8
 81006c4:	af00      	add	r7, sp, #0
 81006c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81006c8:	4b15      	ldr	r3, [pc, #84]	; (8100720 <HAL_InitTick+0x60>)
 81006ca:	781b      	ldrb	r3, [r3, #0]
 81006cc:	2b00      	cmp	r3, #0
 81006ce:	d101      	bne.n	81006d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81006d0:	2301      	movs	r3, #1
 81006d2:	e021      	b.n	8100718 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81006d4:	4b13      	ldr	r3, [pc, #76]	; (8100724 <HAL_InitTick+0x64>)
 81006d6:	681a      	ldr	r2, [r3, #0]
 81006d8:	4b11      	ldr	r3, [pc, #68]	; (8100720 <HAL_InitTick+0x60>)
 81006da:	781b      	ldrb	r3, [r3, #0]
 81006dc:	4619      	mov	r1, r3
 81006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81006e2:	fbb3 f3f1 	udiv	r3, r3, r1
 81006e6:	fbb2 f3f3 	udiv	r3, r2, r3
 81006ea:	4618      	mov	r0, r3
 81006ec:	f000 f939 	bl	8100962 <HAL_SYSTICK_Config>
 81006f0:	4603      	mov	r3, r0
 81006f2:	2b00      	cmp	r3, #0
 81006f4:	d001      	beq.n	81006fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81006f6:	2301      	movs	r3, #1
 81006f8:	e00e      	b.n	8100718 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81006fa:	687b      	ldr	r3, [r7, #4]
 81006fc:	2b0f      	cmp	r3, #15
 81006fe:	d80a      	bhi.n	8100716 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100700:	2200      	movs	r2, #0
 8100702:	6879      	ldr	r1, [r7, #4]
 8100704:	f04f 30ff 	mov.w	r0, #4294967295
 8100708:	f000 f911 	bl	810092e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810070c:	4a06      	ldr	r2, [pc, #24]	; (8100728 <HAL_InitTick+0x68>)
 810070e:	687b      	ldr	r3, [r7, #4]
 8100710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100712:	2300      	movs	r3, #0
 8100714:	e000      	b.n	8100718 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100716:	2301      	movs	r3, #1
}
 8100718:	4618      	mov	r0, r3
 810071a:	3708      	adds	r7, #8
 810071c:	46bd      	mov	sp, r7
 810071e:	bd80      	pop	{r7, pc}
 8100720:	1000000c 	.word	0x1000000c
 8100724:	10000000 	.word	0x10000000
 8100728:	10000008 	.word	0x10000008

0810072c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810072c:	b480      	push	{r7}
 810072e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100730:	4b06      	ldr	r3, [pc, #24]	; (810074c <HAL_IncTick+0x20>)
 8100732:	781b      	ldrb	r3, [r3, #0]
 8100734:	461a      	mov	r2, r3
 8100736:	4b06      	ldr	r3, [pc, #24]	; (8100750 <HAL_IncTick+0x24>)
 8100738:	681b      	ldr	r3, [r3, #0]
 810073a:	4413      	add	r3, r2
 810073c:	4a04      	ldr	r2, [pc, #16]	; (8100750 <HAL_IncTick+0x24>)
 810073e:	6013      	str	r3, [r2, #0]
}
 8100740:	bf00      	nop
 8100742:	46bd      	mov	sp, r7
 8100744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100748:	4770      	bx	lr
 810074a:	bf00      	nop
 810074c:	1000000c 	.word	0x1000000c
 8100750:	100001b0 	.word	0x100001b0

08100754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100754:	b480      	push	{r7}
 8100756:	af00      	add	r7, sp, #0
  return uwTick;
 8100758:	4b03      	ldr	r3, [pc, #12]	; (8100768 <HAL_GetTick+0x14>)
 810075a:	681b      	ldr	r3, [r3, #0]
}
 810075c:	4618      	mov	r0, r3
 810075e:	46bd      	mov	sp, r7
 8100760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100764:	4770      	bx	lr
 8100766:	bf00      	nop
 8100768:	100001b0 	.word	0x100001b0

0810076c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810076c:	b580      	push	{r7, lr}
 810076e:	b084      	sub	sp, #16
 8100770:	af00      	add	r7, sp, #0
 8100772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100774:	f7ff ffee 	bl	8100754 <HAL_GetTick>
 8100778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810077a:	687b      	ldr	r3, [r7, #4]
 810077c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810077e:	68fb      	ldr	r3, [r7, #12]
 8100780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100784:	d005      	beq.n	8100792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100786:	4b0a      	ldr	r3, [pc, #40]	; (81007b0 <HAL_Delay+0x44>)
 8100788:	781b      	ldrb	r3, [r3, #0]
 810078a:	461a      	mov	r2, r3
 810078c:	68fb      	ldr	r3, [r7, #12]
 810078e:	4413      	add	r3, r2
 8100790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100792:	bf00      	nop
 8100794:	f7ff ffde 	bl	8100754 <HAL_GetTick>
 8100798:	4602      	mov	r2, r0
 810079a:	68bb      	ldr	r3, [r7, #8]
 810079c:	1ad3      	subs	r3, r2, r3
 810079e:	68fa      	ldr	r2, [r7, #12]
 81007a0:	429a      	cmp	r2, r3
 81007a2:	d8f7      	bhi.n	8100794 <HAL_Delay+0x28>
  {
  }
}
 81007a4:	bf00      	nop
 81007a6:	bf00      	nop
 81007a8:	3710      	adds	r7, #16
 81007aa:	46bd      	mov	sp, r7
 81007ac:	bd80      	pop	{r7, pc}
 81007ae:	bf00      	nop
 81007b0:	1000000c 	.word	0x1000000c

081007b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81007b4:	b480      	push	{r7}
 81007b6:	b085      	sub	sp, #20
 81007b8:	af00      	add	r7, sp, #0
 81007ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81007bc:	687b      	ldr	r3, [r7, #4]
 81007be:	f003 0307 	and.w	r3, r3, #7
 81007c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81007c4:	4b0c      	ldr	r3, [pc, #48]	; (81007f8 <__NVIC_SetPriorityGrouping+0x44>)
 81007c6:	68db      	ldr	r3, [r3, #12]
 81007c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81007ca:	68ba      	ldr	r2, [r7, #8]
 81007cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81007d0:	4013      	ands	r3, r2
 81007d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81007d4:	68fb      	ldr	r3, [r7, #12]
 81007d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81007d8:	68bb      	ldr	r3, [r7, #8]
 81007da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81007dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81007e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81007e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81007e6:	4a04      	ldr	r2, [pc, #16]	; (81007f8 <__NVIC_SetPriorityGrouping+0x44>)
 81007e8:	68bb      	ldr	r3, [r7, #8]
 81007ea:	60d3      	str	r3, [r2, #12]
}
 81007ec:	bf00      	nop
 81007ee:	3714      	adds	r7, #20
 81007f0:	46bd      	mov	sp, r7
 81007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007f6:	4770      	bx	lr
 81007f8:	e000ed00 	.word	0xe000ed00

081007fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81007fc:	b480      	push	{r7}
 81007fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100800:	4b04      	ldr	r3, [pc, #16]	; (8100814 <__NVIC_GetPriorityGrouping+0x18>)
 8100802:	68db      	ldr	r3, [r3, #12]
 8100804:	0a1b      	lsrs	r3, r3, #8
 8100806:	f003 0307 	and.w	r3, r3, #7
}
 810080a:	4618      	mov	r0, r3
 810080c:	46bd      	mov	sp, r7
 810080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100812:	4770      	bx	lr
 8100814:	e000ed00 	.word	0xe000ed00

08100818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100818:	b480      	push	{r7}
 810081a:	b083      	sub	sp, #12
 810081c:	af00      	add	r7, sp, #0
 810081e:	4603      	mov	r3, r0
 8100820:	6039      	str	r1, [r7, #0]
 8100822:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100828:	2b00      	cmp	r3, #0
 810082a:	db0a      	blt.n	8100842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810082c:	683b      	ldr	r3, [r7, #0]
 810082e:	b2da      	uxtb	r2, r3
 8100830:	490c      	ldr	r1, [pc, #48]	; (8100864 <__NVIC_SetPriority+0x4c>)
 8100832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100836:	0112      	lsls	r2, r2, #4
 8100838:	b2d2      	uxtb	r2, r2
 810083a:	440b      	add	r3, r1
 810083c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100840:	e00a      	b.n	8100858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100842:	683b      	ldr	r3, [r7, #0]
 8100844:	b2da      	uxtb	r2, r3
 8100846:	4908      	ldr	r1, [pc, #32]	; (8100868 <__NVIC_SetPriority+0x50>)
 8100848:	88fb      	ldrh	r3, [r7, #6]
 810084a:	f003 030f 	and.w	r3, r3, #15
 810084e:	3b04      	subs	r3, #4
 8100850:	0112      	lsls	r2, r2, #4
 8100852:	b2d2      	uxtb	r2, r2
 8100854:	440b      	add	r3, r1
 8100856:	761a      	strb	r2, [r3, #24]
}
 8100858:	bf00      	nop
 810085a:	370c      	adds	r7, #12
 810085c:	46bd      	mov	sp, r7
 810085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100862:	4770      	bx	lr
 8100864:	e000e100 	.word	0xe000e100
 8100868:	e000ed00 	.word	0xe000ed00

0810086c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810086c:	b480      	push	{r7}
 810086e:	b089      	sub	sp, #36	; 0x24
 8100870:	af00      	add	r7, sp, #0
 8100872:	60f8      	str	r0, [r7, #12]
 8100874:	60b9      	str	r1, [r7, #8]
 8100876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100878:	68fb      	ldr	r3, [r7, #12]
 810087a:	f003 0307 	and.w	r3, r3, #7
 810087e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100880:	69fb      	ldr	r3, [r7, #28]
 8100882:	f1c3 0307 	rsb	r3, r3, #7
 8100886:	2b04      	cmp	r3, #4
 8100888:	bf28      	it	cs
 810088a:	2304      	movcs	r3, #4
 810088c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810088e:	69fb      	ldr	r3, [r7, #28]
 8100890:	3304      	adds	r3, #4
 8100892:	2b06      	cmp	r3, #6
 8100894:	d902      	bls.n	810089c <NVIC_EncodePriority+0x30>
 8100896:	69fb      	ldr	r3, [r7, #28]
 8100898:	3b03      	subs	r3, #3
 810089a:	e000      	b.n	810089e <NVIC_EncodePriority+0x32>
 810089c:	2300      	movs	r3, #0
 810089e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81008a0:	f04f 32ff 	mov.w	r2, #4294967295
 81008a4:	69bb      	ldr	r3, [r7, #24]
 81008a6:	fa02 f303 	lsl.w	r3, r2, r3
 81008aa:	43da      	mvns	r2, r3
 81008ac:	68bb      	ldr	r3, [r7, #8]
 81008ae:	401a      	ands	r2, r3
 81008b0:	697b      	ldr	r3, [r7, #20]
 81008b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81008b4:	f04f 31ff 	mov.w	r1, #4294967295
 81008b8:	697b      	ldr	r3, [r7, #20]
 81008ba:	fa01 f303 	lsl.w	r3, r1, r3
 81008be:	43d9      	mvns	r1, r3
 81008c0:	687b      	ldr	r3, [r7, #4]
 81008c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81008c4:	4313      	orrs	r3, r2
         );
}
 81008c6:	4618      	mov	r0, r3
 81008c8:	3724      	adds	r7, #36	; 0x24
 81008ca:	46bd      	mov	sp, r7
 81008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008d0:	4770      	bx	lr
	...

081008d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81008d4:	b580      	push	{r7, lr}
 81008d6:	b082      	sub	sp, #8
 81008d8:	af00      	add	r7, sp, #0
 81008da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81008dc:	687b      	ldr	r3, [r7, #4]
 81008de:	3b01      	subs	r3, #1
 81008e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81008e4:	d301      	bcc.n	81008ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81008e6:	2301      	movs	r3, #1
 81008e8:	e00f      	b.n	810090a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81008ea:	4a0a      	ldr	r2, [pc, #40]	; (8100914 <SysTick_Config+0x40>)
 81008ec:	687b      	ldr	r3, [r7, #4]
 81008ee:	3b01      	subs	r3, #1
 81008f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81008f2:	210f      	movs	r1, #15
 81008f4:	f04f 30ff 	mov.w	r0, #4294967295
 81008f8:	f7ff ff8e 	bl	8100818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81008fc:	4b05      	ldr	r3, [pc, #20]	; (8100914 <SysTick_Config+0x40>)
 81008fe:	2200      	movs	r2, #0
 8100900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100902:	4b04      	ldr	r3, [pc, #16]	; (8100914 <SysTick_Config+0x40>)
 8100904:	2207      	movs	r2, #7
 8100906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100908:	2300      	movs	r3, #0
}
 810090a:	4618      	mov	r0, r3
 810090c:	3708      	adds	r7, #8
 810090e:	46bd      	mov	sp, r7
 8100910:	bd80      	pop	{r7, pc}
 8100912:	bf00      	nop
 8100914:	e000e010 	.word	0xe000e010

08100918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100918:	b580      	push	{r7, lr}
 810091a:	b082      	sub	sp, #8
 810091c:	af00      	add	r7, sp, #0
 810091e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100920:	6878      	ldr	r0, [r7, #4]
 8100922:	f7ff ff47 	bl	81007b4 <__NVIC_SetPriorityGrouping>
}
 8100926:	bf00      	nop
 8100928:	3708      	adds	r7, #8
 810092a:	46bd      	mov	sp, r7
 810092c:	bd80      	pop	{r7, pc}

0810092e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810092e:	b580      	push	{r7, lr}
 8100930:	b086      	sub	sp, #24
 8100932:	af00      	add	r7, sp, #0
 8100934:	4603      	mov	r3, r0
 8100936:	60b9      	str	r1, [r7, #8]
 8100938:	607a      	str	r2, [r7, #4]
 810093a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810093c:	f7ff ff5e 	bl	81007fc <__NVIC_GetPriorityGrouping>
 8100940:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100942:	687a      	ldr	r2, [r7, #4]
 8100944:	68b9      	ldr	r1, [r7, #8]
 8100946:	6978      	ldr	r0, [r7, #20]
 8100948:	f7ff ff90 	bl	810086c <NVIC_EncodePriority>
 810094c:	4602      	mov	r2, r0
 810094e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100952:	4611      	mov	r1, r2
 8100954:	4618      	mov	r0, r3
 8100956:	f7ff ff5f 	bl	8100818 <__NVIC_SetPriority>
}
 810095a:	bf00      	nop
 810095c:	3718      	adds	r7, #24
 810095e:	46bd      	mov	sp, r7
 8100960:	bd80      	pop	{r7, pc}

08100962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100962:	b580      	push	{r7, lr}
 8100964:	b082      	sub	sp, #8
 8100966:	af00      	add	r7, sp, #0
 8100968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810096a:	6878      	ldr	r0, [r7, #4]
 810096c:	f7ff ffb2 	bl	81008d4 <SysTick_Config>
 8100970:	4603      	mov	r3, r0
}
 8100972:	4618      	mov	r0, r3
 8100974:	3708      	adds	r7, #8
 8100976:	46bd      	mov	sp, r7
 8100978:	bd80      	pop	{r7, pc}
	...

0810097c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810097c:	b480      	push	{r7}
 810097e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100980:	4b07      	ldr	r3, [pc, #28]	; (81009a0 <HAL_GetCurrentCPUID+0x24>)
 8100982:	681b      	ldr	r3, [r3, #0]
 8100984:	091b      	lsrs	r3, r3, #4
 8100986:	f003 030f 	and.w	r3, r3, #15
 810098a:	2b07      	cmp	r3, #7
 810098c:	d101      	bne.n	8100992 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810098e:	2303      	movs	r3, #3
 8100990:	e000      	b.n	8100994 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100992:	2301      	movs	r3, #1
  }
}
 8100994:	4618      	mov	r0, r3
 8100996:	46bd      	mov	sp, r7
 8100998:	f85d 7b04 	ldr.w	r7, [sp], #4
 810099c:	4770      	bx	lr
 810099e:	bf00      	nop
 81009a0:	e000ed00 	.word	0xe000ed00

081009a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81009a4:	b480      	push	{r7}
 81009a6:	b089      	sub	sp, #36	; 0x24
 81009a8:	af00      	add	r7, sp, #0
 81009aa:	6078      	str	r0, [r7, #4]
 81009ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81009ae:	2300      	movs	r3, #0
 81009b0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81009b2:	4b89      	ldr	r3, [pc, #548]	; (8100bd8 <HAL_GPIO_Init+0x234>)
 81009b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81009b6:	e194      	b.n	8100ce2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81009b8:	683b      	ldr	r3, [r7, #0]
 81009ba:	681a      	ldr	r2, [r3, #0]
 81009bc:	2101      	movs	r1, #1
 81009be:	69fb      	ldr	r3, [r7, #28]
 81009c0:	fa01 f303 	lsl.w	r3, r1, r3
 81009c4:	4013      	ands	r3, r2
 81009c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81009c8:	693b      	ldr	r3, [r7, #16]
 81009ca:	2b00      	cmp	r3, #0
 81009cc:	f000 8186 	beq.w	8100cdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81009d0:	683b      	ldr	r3, [r7, #0]
 81009d2:	685b      	ldr	r3, [r3, #4]
 81009d4:	f003 0303 	and.w	r3, r3, #3
 81009d8:	2b01      	cmp	r3, #1
 81009da:	d005      	beq.n	81009e8 <HAL_GPIO_Init+0x44>
 81009dc:	683b      	ldr	r3, [r7, #0]
 81009de:	685b      	ldr	r3, [r3, #4]
 81009e0:	f003 0303 	and.w	r3, r3, #3
 81009e4:	2b02      	cmp	r3, #2
 81009e6:	d130      	bne.n	8100a4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81009e8:	687b      	ldr	r3, [r7, #4]
 81009ea:	689b      	ldr	r3, [r3, #8]
 81009ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81009ee:	69fb      	ldr	r3, [r7, #28]
 81009f0:	005b      	lsls	r3, r3, #1
 81009f2:	2203      	movs	r2, #3
 81009f4:	fa02 f303 	lsl.w	r3, r2, r3
 81009f8:	43db      	mvns	r3, r3
 81009fa:	69ba      	ldr	r2, [r7, #24]
 81009fc:	4013      	ands	r3, r2
 81009fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100a00:	683b      	ldr	r3, [r7, #0]
 8100a02:	68da      	ldr	r2, [r3, #12]
 8100a04:	69fb      	ldr	r3, [r7, #28]
 8100a06:	005b      	lsls	r3, r3, #1
 8100a08:	fa02 f303 	lsl.w	r3, r2, r3
 8100a0c:	69ba      	ldr	r2, [r7, #24]
 8100a0e:	4313      	orrs	r3, r2
 8100a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100a12:	687b      	ldr	r3, [r7, #4]
 8100a14:	69ba      	ldr	r2, [r7, #24]
 8100a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100a18:	687b      	ldr	r3, [r7, #4]
 8100a1a:	685b      	ldr	r3, [r3, #4]
 8100a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100a1e:	2201      	movs	r2, #1
 8100a20:	69fb      	ldr	r3, [r7, #28]
 8100a22:	fa02 f303 	lsl.w	r3, r2, r3
 8100a26:	43db      	mvns	r3, r3
 8100a28:	69ba      	ldr	r2, [r7, #24]
 8100a2a:	4013      	ands	r3, r2
 8100a2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100a2e:	683b      	ldr	r3, [r7, #0]
 8100a30:	685b      	ldr	r3, [r3, #4]
 8100a32:	091b      	lsrs	r3, r3, #4
 8100a34:	f003 0201 	and.w	r2, r3, #1
 8100a38:	69fb      	ldr	r3, [r7, #28]
 8100a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a3e:	69ba      	ldr	r2, [r7, #24]
 8100a40:	4313      	orrs	r3, r2
 8100a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100a44:	687b      	ldr	r3, [r7, #4]
 8100a46:	69ba      	ldr	r2, [r7, #24]
 8100a48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100a4a:	683b      	ldr	r3, [r7, #0]
 8100a4c:	685b      	ldr	r3, [r3, #4]
 8100a4e:	f003 0303 	and.w	r3, r3, #3
 8100a52:	2b03      	cmp	r3, #3
 8100a54:	d017      	beq.n	8100a86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100a56:	687b      	ldr	r3, [r7, #4]
 8100a58:	68db      	ldr	r3, [r3, #12]
 8100a5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100a5c:	69fb      	ldr	r3, [r7, #28]
 8100a5e:	005b      	lsls	r3, r3, #1
 8100a60:	2203      	movs	r2, #3
 8100a62:	fa02 f303 	lsl.w	r3, r2, r3
 8100a66:	43db      	mvns	r3, r3
 8100a68:	69ba      	ldr	r2, [r7, #24]
 8100a6a:	4013      	ands	r3, r2
 8100a6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100a6e:	683b      	ldr	r3, [r7, #0]
 8100a70:	689a      	ldr	r2, [r3, #8]
 8100a72:	69fb      	ldr	r3, [r7, #28]
 8100a74:	005b      	lsls	r3, r3, #1
 8100a76:	fa02 f303 	lsl.w	r3, r2, r3
 8100a7a:	69ba      	ldr	r2, [r7, #24]
 8100a7c:	4313      	orrs	r3, r2
 8100a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100a80:	687b      	ldr	r3, [r7, #4]
 8100a82:	69ba      	ldr	r2, [r7, #24]
 8100a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100a86:	683b      	ldr	r3, [r7, #0]
 8100a88:	685b      	ldr	r3, [r3, #4]
 8100a8a:	f003 0303 	and.w	r3, r3, #3
 8100a8e:	2b02      	cmp	r3, #2
 8100a90:	d123      	bne.n	8100ada <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100a92:	69fb      	ldr	r3, [r7, #28]
 8100a94:	08da      	lsrs	r2, r3, #3
 8100a96:	687b      	ldr	r3, [r7, #4]
 8100a98:	3208      	adds	r2, #8
 8100a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100aa0:	69fb      	ldr	r3, [r7, #28]
 8100aa2:	f003 0307 	and.w	r3, r3, #7
 8100aa6:	009b      	lsls	r3, r3, #2
 8100aa8:	220f      	movs	r2, #15
 8100aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8100aae:	43db      	mvns	r3, r3
 8100ab0:	69ba      	ldr	r2, [r7, #24]
 8100ab2:	4013      	ands	r3, r2
 8100ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100ab6:	683b      	ldr	r3, [r7, #0]
 8100ab8:	691a      	ldr	r2, [r3, #16]
 8100aba:	69fb      	ldr	r3, [r7, #28]
 8100abc:	f003 0307 	and.w	r3, r3, #7
 8100ac0:	009b      	lsls	r3, r3, #2
 8100ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8100ac6:	69ba      	ldr	r2, [r7, #24]
 8100ac8:	4313      	orrs	r3, r2
 8100aca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100acc:	69fb      	ldr	r3, [r7, #28]
 8100ace:	08da      	lsrs	r2, r3, #3
 8100ad0:	687b      	ldr	r3, [r7, #4]
 8100ad2:	3208      	adds	r2, #8
 8100ad4:	69b9      	ldr	r1, [r7, #24]
 8100ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100ada:	687b      	ldr	r3, [r7, #4]
 8100adc:	681b      	ldr	r3, [r3, #0]
 8100ade:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100ae0:	69fb      	ldr	r3, [r7, #28]
 8100ae2:	005b      	lsls	r3, r3, #1
 8100ae4:	2203      	movs	r2, #3
 8100ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8100aea:	43db      	mvns	r3, r3
 8100aec:	69ba      	ldr	r2, [r7, #24]
 8100aee:	4013      	ands	r3, r2
 8100af0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100af2:	683b      	ldr	r3, [r7, #0]
 8100af4:	685b      	ldr	r3, [r3, #4]
 8100af6:	f003 0203 	and.w	r2, r3, #3
 8100afa:	69fb      	ldr	r3, [r7, #28]
 8100afc:	005b      	lsls	r3, r3, #1
 8100afe:	fa02 f303 	lsl.w	r3, r2, r3
 8100b02:	69ba      	ldr	r2, [r7, #24]
 8100b04:	4313      	orrs	r3, r2
 8100b06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100b08:	687b      	ldr	r3, [r7, #4]
 8100b0a:	69ba      	ldr	r2, [r7, #24]
 8100b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100b0e:	683b      	ldr	r3, [r7, #0]
 8100b10:	685b      	ldr	r3, [r3, #4]
 8100b12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100b16:	2b00      	cmp	r3, #0
 8100b18:	f000 80e0 	beq.w	8100cdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100b1c:	4b2f      	ldr	r3, [pc, #188]	; (8100bdc <HAL_GPIO_Init+0x238>)
 8100b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b22:	4a2e      	ldr	r2, [pc, #184]	; (8100bdc <HAL_GPIO_Init+0x238>)
 8100b24:	f043 0302 	orr.w	r3, r3, #2
 8100b28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100b2c:	4b2b      	ldr	r3, [pc, #172]	; (8100bdc <HAL_GPIO_Init+0x238>)
 8100b2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b32:	f003 0302 	and.w	r3, r3, #2
 8100b36:	60fb      	str	r3, [r7, #12]
 8100b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100b3a:	4a29      	ldr	r2, [pc, #164]	; (8100be0 <HAL_GPIO_Init+0x23c>)
 8100b3c:	69fb      	ldr	r3, [r7, #28]
 8100b3e:	089b      	lsrs	r3, r3, #2
 8100b40:	3302      	adds	r3, #2
 8100b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100b48:	69fb      	ldr	r3, [r7, #28]
 8100b4a:	f003 0303 	and.w	r3, r3, #3
 8100b4e:	009b      	lsls	r3, r3, #2
 8100b50:	220f      	movs	r2, #15
 8100b52:	fa02 f303 	lsl.w	r3, r2, r3
 8100b56:	43db      	mvns	r3, r3
 8100b58:	69ba      	ldr	r2, [r7, #24]
 8100b5a:	4013      	ands	r3, r2
 8100b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100b5e:	687b      	ldr	r3, [r7, #4]
 8100b60:	4a20      	ldr	r2, [pc, #128]	; (8100be4 <HAL_GPIO_Init+0x240>)
 8100b62:	4293      	cmp	r3, r2
 8100b64:	d052      	beq.n	8100c0c <HAL_GPIO_Init+0x268>
 8100b66:	687b      	ldr	r3, [r7, #4]
 8100b68:	4a1f      	ldr	r2, [pc, #124]	; (8100be8 <HAL_GPIO_Init+0x244>)
 8100b6a:	4293      	cmp	r3, r2
 8100b6c:	d031      	beq.n	8100bd2 <HAL_GPIO_Init+0x22e>
 8100b6e:	687b      	ldr	r3, [r7, #4]
 8100b70:	4a1e      	ldr	r2, [pc, #120]	; (8100bec <HAL_GPIO_Init+0x248>)
 8100b72:	4293      	cmp	r3, r2
 8100b74:	d02b      	beq.n	8100bce <HAL_GPIO_Init+0x22a>
 8100b76:	687b      	ldr	r3, [r7, #4]
 8100b78:	4a1d      	ldr	r2, [pc, #116]	; (8100bf0 <HAL_GPIO_Init+0x24c>)
 8100b7a:	4293      	cmp	r3, r2
 8100b7c:	d025      	beq.n	8100bca <HAL_GPIO_Init+0x226>
 8100b7e:	687b      	ldr	r3, [r7, #4]
 8100b80:	4a1c      	ldr	r2, [pc, #112]	; (8100bf4 <HAL_GPIO_Init+0x250>)
 8100b82:	4293      	cmp	r3, r2
 8100b84:	d01f      	beq.n	8100bc6 <HAL_GPIO_Init+0x222>
 8100b86:	687b      	ldr	r3, [r7, #4]
 8100b88:	4a1b      	ldr	r2, [pc, #108]	; (8100bf8 <HAL_GPIO_Init+0x254>)
 8100b8a:	4293      	cmp	r3, r2
 8100b8c:	d019      	beq.n	8100bc2 <HAL_GPIO_Init+0x21e>
 8100b8e:	687b      	ldr	r3, [r7, #4]
 8100b90:	4a1a      	ldr	r2, [pc, #104]	; (8100bfc <HAL_GPIO_Init+0x258>)
 8100b92:	4293      	cmp	r3, r2
 8100b94:	d013      	beq.n	8100bbe <HAL_GPIO_Init+0x21a>
 8100b96:	687b      	ldr	r3, [r7, #4]
 8100b98:	4a19      	ldr	r2, [pc, #100]	; (8100c00 <HAL_GPIO_Init+0x25c>)
 8100b9a:	4293      	cmp	r3, r2
 8100b9c:	d00d      	beq.n	8100bba <HAL_GPIO_Init+0x216>
 8100b9e:	687b      	ldr	r3, [r7, #4]
 8100ba0:	4a18      	ldr	r2, [pc, #96]	; (8100c04 <HAL_GPIO_Init+0x260>)
 8100ba2:	4293      	cmp	r3, r2
 8100ba4:	d007      	beq.n	8100bb6 <HAL_GPIO_Init+0x212>
 8100ba6:	687b      	ldr	r3, [r7, #4]
 8100ba8:	4a17      	ldr	r2, [pc, #92]	; (8100c08 <HAL_GPIO_Init+0x264>)
 8100baa:	4293      	cmp	r3, r2
 8100bac:	d101      	bne.n	8100bb2 <HAL_GPIO_Init+0x20e>
 8100bae:	2309      	movs	r3, #9
 8100bb0:	e02d      	b.n	8100c0e <HAL_GPIO_Init+0x26a>
 8100bb2:	230a      	movs	r3, #10
 8100bb4:	e02b      	b.n	8100c0e <HAL_GPIO_Init+0x26a>
 8100bb6:	2308      	movs	r3, #8
 8100bb8:	e029      	b.n	8100c0e <HAL_GPIO_Init+0x26a>
 8100bba:	2307      	movs	r3, #7
 8100bbc:	e027      	b.n	8100c0e <HAL_GPIO_Init+0x26a>
 8100bbe:	2306      	movs	r3, #6
 8100bc0:	e025      	b.n	8100c0e <HAL_GPIO_Init+0x26a>
 8100bc2:	2305      	movs	r3, #5
 8100bc4:	e023      	b.n	8100c0e <HAL_GPIO_Init+0x26a>
 8100bc6:	2304      	movs	r3, #4
 8100bc8:	e021      	b.n	8100c0e <HAL_GPIO_Init+0x26a>
 8100bca:	2303      	movs	r3, #3
 8100bcc:	e01f      	b.n	8100c0e <HAL_GPIO_Init+0x26a>
 8100bce:	2302      	movs	r3, #2
 8100bd0:	e01d      	b.n	8100c0e <HAL_GPIO_Init+0x26a>
 8100bd2:	2301      	movs	r3, #1
 8100bd4:	e01b      	b.n	8100c0e <HAL_GPIO_Init+0x26a>
 8100bd6:	bf00      	nop
 8100bd8:	580000c0 	.word	0x580000c0
 8100bdc:	58024400 	.word	0x58024400
 8100be0:	58000400 	.word	0x58000400
 8100be4:	58020000 	.word	0x58020000
 8100be8:	58020400 	.word	0x58020400
 8100bec:	58020800 	.word	0x58020800
 8100bf0:	58020c00 	.word	0x58020c00
 8100bf4:	58021000 	.word	0x58021000
 8100bf8:	58021400 	.word	0x58021400
 8100bfc:	58021800 	.word	0x58021800
 8100c00:	58021c00 	.word	0x58021c00
 8100c04:	58022000 	.word	0x58022000
 8100c08:	58022400 	.word	0x58022400
 8100c0c:	2300      	movs	r3, #0
 8100c0e:	69fa      	ldr	r2, [r7, #28]
 8100c10:	f002 0203 	and.w	r2, r2, #3
 8100c14:	0092      	lsls	r2, r2, #2
 8100c16:	4093      	lsls	r3, r2
 8100c18:	69ba      	ldr	r2, [r7, #24]
 8100c1a:	4313      	orrs	r3, r2
 8100c1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100c1e:	4938      	ldr	r1, [pc, #224]	; (8100d00 <HAL_GPIO_Init+0x35c>)
 8100c20:	69fb      	ldr	r3, [r7, #28]
 8100c22:	089b      	lsrs	r3, r3, #2
 8100c24:	3302      	adds	r3, #2
 8100c26:	69ba      	ldr	r2, [r7, #24]
 8100c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100c30:	681b      	ldr	r3, [r3, #0]
 8100c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c34:	693b      	ldr	r3, [r7, #16]
 8100c36:	43db      	mvns	r3, r3
 8100c38:	69ba      	ldr	r2, [r7, #24]
 8100c3a:	4013      	ands	r3, r2
 8100c3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100c3e:	683b      	ldr	r3, [r7, #0]
 8100c40:	685b      	ldr	r3, [r3, #4]
 8100c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100c46:	2b00      	cmp	r3, #0
 8100c48:	d003      	beq.n	8100c52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100c4a:	69ba      	ldr	r2, [r7, #24]
 8100c4c:	693b      	ldr	r3, [r7, #16]
 8100c4e:	4313      	orrs	r3, r2
 8100c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100c56:	69bb      	ldr	r3, [r7, #24]
 8100c58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100c5e:	685b      	ldr	r3, [r3, #4]
 8100c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c62:	693b      	ldr	r3, [r7, #16]
 8100c64:	43db      	mvns	r3, r3
 8100c66:	69ba      	ldr	r2, [r7, #24]
 8100c68:	4013      	ands	r3, r2
 8100c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100c6c:	683b      	ldr	r3, [r7, #0]
 8100c6e:	685b      	ldr	r3, [r3, #4]
 8100c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100c74:	2b00      	cmp	r3, #0
 8100c76:	d003      	beq.n	8100c80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100c78:	69ba      	ldr	r2, [r7, #24]
 8100c7a:	693b      	ldr	r3, [r7, #16]
 8100c7c:	4313      	orrs	r3, r2
 8100c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100c80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100c84:	69bb      	ldr	r3, [r7, #24]
 8100c86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100c88:	697b      	ldr	r3, [r7, #20]
 8100c8a:	685b      	ldr	r3, [r3, #4]
 8100c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c8e:	693b      	ldr	r3, [r7, #16]
 8100c90:	43db      	mvns	r3, r3
 8100c92:	69ba      	ldr	r2, [r7, #24]
 8100c94:	4013      	ands	r3, r2
 8100c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100c98:	683b      	ldr	r3, [r7, #0]
 8100c9a:	685b      	ldr	r3, [r3, #4]
 8100c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100ca0:	2b00      	cmp	r3, #0
 8100ca2:	d003      	beq.n	8100cac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100ca4:	69ba      	ldr	r2, [r7, #24]
 8100ca6:	693b      	ldr	r3, [r7, #16]
 8100ca8:	4313      	orrs	r3, r2
 8100caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100cac:	697b      	ldr	r3, [r7, #20]
 8100cae:	69ba      	ldr	r2, [r7, #24]
 8100cb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100cb2:	697b      	ldr	r3, [r7, #20]
 8100cb4:	681b      	ldr	r3, [r3, #0]
 8100cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100cb8:	693b      	ldr	r3, [r7, #16]
 8100cba:	43db      	mvns	r3, r3
 8100cbc:	69ba      	ldr	r2, [r7, #24]
 8100cbe:	4013      	ands	r3, r2
 8100cc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100cc2:	683b      	ldr	r3, [r7, #0]
 8100cc4:	685b      	ldr	r3, [r3, #4]
 8100cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100cca:	2b00      	cmp	r3, #0
 8100ccc:	d003      	beq.n	8100cd6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100cce:	69ba      	ldr	r2, [r7, #24]
 8100cd0:	693b      	ldr	r3, [r7, #16]
 8100cd2:	4313      	orrs	r3, r2
 8100cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100cd6:	697b      	ldr	r3, [r7, #20]
 8100cd8:	69ba      	ldr	r2, [r7, #24]
 8100cda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100cdc:	69fb      	ldr	r3, [r7, #28]
 8100cde:	3301      	adds	r3, #1
 8100ce0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100ce2:	683b      	ldr	r3, [r7, #0]
 8100ce4:	681a      	ldr	r2, [r3, #0]
 8100ce6:	69fb      	ldr	r3, [r7, #28]
 8100ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8100cec:	2b00      	cmp	r3, #0
 8100cee:	f47f ae63 	bne.w	81009b8 <HAL_GPIO_Init+0x14>
  }
}
 8100cf2:	bf00      	nop
 8100cf4:	bf00      	nop
 8100cf6:	3724      	adds	r7, #36	; 0x24
 8100cf8:	46bd      	mov	sp, r7
 8100cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cfe:	4770      	bx	lr
 8100d00:	58000400 	.word	0x58000400

08100d04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8100d04:	b480      	push	{r7}
 8100d06:	b087      	sub	sp, #28
 8100d08:	af00      	add	r7, sp, #0
 8100d0a:	6078      	str	r0, [r7, #4]
 8100d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100d0e:	2300      	movs	r3, #0
 8100d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t tmp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100d12:	4b75      	ldr	r3, [pc, #468]	; (8100ee8 <HAL_GPIO_DeInit+0x1e4>)
 8100d14:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8100d16:	e0d9      	b.n	8100ecc <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8100d18:	2201      	movs	r2, #1
 8100d1a:	697b      	ldr	r3, [r7, #20]
 8100d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8100d20:	683a      	ldr	r2, [r7, #0]
 8100d22:	4013      	ands	r3, r2
 8100d24:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8100d26:	68fb      	ldr	r3, [r7, #12]
 8100d28:	2b00      	cmp	r3, #0
 8100d2a:	f000 80cc 	beq.w	8100ec6 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8100d2e:	4a6f      	ldr	r2, [pc, #444]	; (8100eec <HAL_GPIO_DeInit+0x1e8>)
 8100d30:	697b      	ldr	r3, [r7, #20]
 8100d32:	089b      	lsrs	r3, r3, #2
 8100d34:	3302      	adds	r3, #2
 8100d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100d3a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8100d3c:	697b      	ldr	r3, [r7, #20]
 8100d3e:	f003 0303 	and.w	r3, r3, #3
 8100d42:	009b      	lsls	r3, r3, #2
 8100d44:	220f      	movs	r2, #15
 8100d46:	fa02 f303 	lsl.w	r3, r2, r3
 8100d4a:	68ba      	ldr	r2, [r7, #8]
 8100d4c:	4013      	ands	r3, r2
 8100d4e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8100d50:	687b      	ldr	r3, [r7, #4]
 8100d52:	4a67      	ldr	r2, [pc, #412]	; (8100ef0 <HAL_GPIO_DeInit+0x1ec>)
 8100d54:	4293      	cmp	r3, r2
 8100d56:	d037      	beq.n	8100dc8 <HAL_GPIO_DeInit+0xc4>
 8100d58:	687b      	ldr	r3, [r7, #4]
 8100d5a:	4a66      	ldr	r2, [pc, #408]	; (8100ef4 <HAL_GPIO_DeInit+0x1f0>)
 8100d5c:	4293      	cmp	r3, r2
 8100d5e:	d031      	beq.n	8100dc4 <HAL_GPIO_DeInit+0xc0>
 8100d60:	687b      	ldr	r3, [r7, #4]
 8100d62:	4a65      	ldr	r2, [pc, #404]	; (8100ef8 <HAL_GPIO_DeInit+0x1f4>)
 8100d64:	4293      	cmp	r3, r2
 8100d66:	d02b      	beq.n	8100dc0 <HAL_GPIO_DeInit+0xbc>
 8100d68:	687b      	ldr	r3, [r7, #4]
 8100d6a:	4a64      	ldr	r2, [pc, #400]	; (8100efc <HAL_GPIO_DeInit+0x1f8>)
 8100d6c:	4293      	cmp	r3, r2
 8100d6e:	d025      	beq.n	8100dbc <HAL_GPIO_DeInit+0xb8>
 8100d70:	687b      	ldr	r3, [r7, #4]
 8100d72:	4a63      	ldr	r2, [pc, #396]	; (8100f00 <HAL_GPIO_DeInit+0x1fc>)
 8100d74:	4293      	cmp	r3, r2
 8100d76:	d01f      	beq.n	8100db8 <HAL_GPIO_DeInit+0xb4>
 8100d78:	687b      	ldr	r3, [r7, #4]
 8100d7a:	4a62      	ldr	r2, [pc, #392]	; (8100f04 <HAL_GPIO_DeInit+0x200>)
 8100d7c:	4293      	cmp	r3, r2
 8100d7e:	d019      	beq.n	8100db4 <HAL_GPIO_DeInit+0xb0>
 8100d80:	687b      	ldr	r3, [r7, #4]
 8100d82:	4a61      	ldr	r2, [pc, #388]	; (8100f08 <HAL_GPIO_DeInit+0x204>)
 8100d84:	4293      	cmp	r3, r2
 8100d86:	d013      	beq.n	8100db0 <HAL_GPIO_DeInit+0xac>
 8100d88:	687b      	ldr	r3, [r7, #4]
 8100d8a:	4a60      	ldr	r2, [pc, #384]	; (8100f0c <HAL_GPIO_DeInit+0x208>)
 8100d8c:	4293      	cmp	r3, r2
 8100d8e:	d00d      	beq.n	8100dac <HAL_GPIO_DeInit+0xa8>
 8100d90:	687b      	ldr	r3, [r7, #4]
 8100d92:	4a5f      	ldr	r2, [pc, #380]	; (8100f10 <HAL_GPIO_DeInit+0x20c>)
 8100d94:	4293      	cmp	r3, r2
 8100d96:	d007      	beq.n	8100da8 <HAL_GPIO_DeInit+0xa4>
 8100d98:	687b      	ldr	r3, [r7, #4]
 8100d9a:	4a5e      	ldr	r2, [pc, #376]	; (8100f14 <HAL_GPIO_DeInit+0x210>)
 8100d9c:	4293      	cmp	r3, r2
 8100d9e:	d101      	bne.n	8100da4 <HAL_GPIO_DeInit+0xa0>
 8100da0:	2309      	movs	r3, #9
 8100da2:	e012      	b.n	8100dca <HAL_GPIO_DeInit+0xc6>
 8100da4:	230a      	movs	r3, #10
 8100da6:	e010      	b.n	8100dca <HAL_GPIO_DeInit+0xc6>
 8100da8:	2308      	movs	r3, #8
 8100daa:	e00e      	b.n	8100dca <HAL_GPIO_DeInit+0xc6>
 8100dac:	2307      	movs	r3, #7
 8100dae:	e00c      	b.n	8100dca <HAL_GPIO_DeInit+0xc6>
 8100db0:	2306      	movs	r3, #6
 8100db2:	e00a      	b.n	8100dca <HAL_GPIO_DeInit+0xc6>
 8100db4:	2305      	movs	r3, #5
 8100db6:	e008      	b.n	8100dca <HAL_GPIO_DeInit+0xc6>
 8100db8:	2304      	movs	r3, #4
 8100dba:	e006      	b.n	8100dca <HAL_GPIO_DeInit+0xc6>
 8100dbc:	2303      	movs	r3, #3
 8100dbe:	e004      	b.n	8100dca <HAL_GPIO_DeInit+0xc6>
 8100dc0:	2302      	movs	r3, #2
 8100dc2:	e002      	b.n	8100dca <HAL_GPIO_DeInit+0xc6>
 8100dc4:	2301      	movs	r3, #1
 8100dc6:	e000      	b.n	8100dca <HAL_GPIO_DeInit+0xc6>
 8100dc8:	2300      	movs	r3, #0
 8100dca:	697a      	ldr	r2, [r7, #20]
 8100dcc:	f002 0203 	and.w	r2, r2, #3
 8100dd0:	0092      	lsls	r2, r2, #2
 8100dd2:	4093      	lsls	r3, r2
 8100dd4:	68ba      	ldr	r2, [r7, #8]
 8100dd6:	429a      	cmp	r2, r3
 8100dd8:	d136      	bne.n	8100e48 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8100dda:	693b      	ldr	r3, [r7, #16]
 8100ddc:	681a      	ldr	r2, [r3, #0]
 8100dde:	68fb      	ldr	r3, [r7, #12]
 8100de0:	43db      	mvns	r3, r3
 8100de2:	401a      	ands	r2, r3
 8100de4:	693b      	ldr	r3, [r7, #16]
 8100de6:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8100de8:	693b      	ldr	r3, [r7, #16]
 8100dea:	685a      	ldr	r2, [r3, #4]
 8100dec:	68fb      	ldr	r3, [r7, #12]
 8100dee:	43db      	mvns	r3, r3
 8100df0:	401a      	ands	r2, r3
 8100df2:	693b      	ldr	r3, [r7, #16]
 8100df4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8100df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100dfa:	685a      	ldr	r2, [r3, #4]
 8100dfc:	68fb      	ldr	r3, [r7, #12]
 8100dfe:	43db      	mvns	r3, r3
 8100e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8100e04:	4013      	ands	r3, r2
 8100e06:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8100e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100e0c:	681a      	ldr	r2, [r3, #0]
 8100e0e:	68fb      	ldr	r3, [r7, #12]
 8100e10:	43db      	mvns	r3, r3
 8100e12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8100e16:	4013      	ands	r3, r2
 8100e18:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8100e1a:	697b      	ldr	r3, [r7, #20]
 8100e1c:	f003 0303 	and.w	r3, r3, #3
 8100e20:	009b      	lsls	r3, r3, #2
 8100e22:	220f      	movs	r2, #15
 8100e24:	fa02 f303 	lsl.w	r3, r2, r3
 8100e28:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8100e2a:	4a30      	ldr	r2, [pc, #192]	; (8100eec <HAL_GPIO_DeInit+0x1e8>)
 8100e2c:	697b      	ldr	r3, [r7, #20]
 8100e2e:	089b      	lsrs	r3, r3, #2
 8100e30:	3302      	adds	r3, #2
 8100e32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8100e36:	68bb      	ldr	r3, [r7, #8]
 8100e38:	43da      	mvns	r2, r3
 8100e3a:	482c      	ldr	r0, [pc, #176]	; (8100eec <HAL_GPIO_DeInit+0x1e8>)
 8100e3c:	697b      	ldr	r3, [r7, #20]
 8100e3e:	089b      	lsrs	r3, r3, #2
 8100e40:	400a      	ands	r2, r1
 8100e42:	3302      	adds	r3, #2
 8100e44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8100e48:	687b      	ldr	r3, [r7, #4]
 8100e4a:	681a      	ldr	r2, [r3, #0]
 8100e4c:	697b      	ldr	r3, [r7, #20]
 8100e4e:	005b      	lsls	r3, r3, #1
 8100e50:	2103      	movs	r1, #3
 8100e52:	fa01 f303 	lsl.w	r3, r1, r3
 8100e56:	431a      	orrs	r2, r3
 8100e58:	687b      	ldr	r3, [r7, #4]
 8100e5a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8100e5c:	697b      	ldr	r3, [r7, #20]
 8100e5e:	08da      	lsrs	r2, r3, #3
 8100e60:	687b      	ldr	r3, [r7, #4]
 8100e62:	3208      	adds	r2, #8
 8100e64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8100e68:	697b      	ldr	r3, [r7, #20]
 8100e6a:	f003 0307 	and.w	r3, r3, #7
 8100e6e:	009b      	lsls	r3, r3, #2
 8100e70:	220f      	movs	r2, #15
 8100e72:	fa02 f303 	lsl.w	r3, r2, r3
 8100e76:	43db      	mvns	r3, r3
 8100e78:	697a      	ldr	r2, [r7, #20]
 8100e7a:	08d2      	lsrs	r2, r2, #3
 8100e7c:	4019      	ands	r1, r3
 8100e7e:	687b      	ldr	r3, [r7, #4]
 8100e80:	3208      	adds	r2, #8
 8100e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100e86:	687b      	ldr	r3, [r7, #4]
 8100e88:	68da      	ldr	r2, [r3, #12]
 8100e8a:	697b      	ldr	r3, [r7, #20]
 8100e8c:	005b      	lsls	r3, r3, #1
 8100e8e:	2103      	movs	r1, #3
 8100e90:	fa01 f303 	lsl.w	r3, r1, r3
 8100e94:	43db      	mvns	r3, r3
 8100e96:	401a      	ands	r2, r3
 8100e98:	687b      	ldr	r3, [r7, #4]
 8100e9a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8100e9c:	687b      	ldr	r3, [r7, #4]
 8100e9e:	685a      	ldr	r2, [r3, #4]
 8100ea0:	2101      	movs	r1, #1
 8100ea2:	697b      	ldr	r3, [r7, #20]
 8100ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8100ea8:	43db      	mvns	r3, r3
 8100eaa:	401a      	ands	r2, r3
 8100eac:	687b      	ldr	r3, [r7, #4]
 8100eae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100eb0:	687b      	ldr	r3, [r7, #4]
 8100eb2:	689a      	ldr	r2, [r3, #8]
 8100eb4:	697b      	ldr	r3, [r7, #20]
 8100eb6:	005b      	lsls	r3, r3, #1
 8100eb8:	2103      	movs	r1, #3
 8100eba:	fa01 f303 	lsl.w	r3, r1, r3
 8100ebe:	43db      	mvns	r3, r3
 8100ec0:	401a      	ands	r2, r3
 8100ec2:	687b      	ldr	r3, [r7, #4]
 8100ec4:	609a      	str	r2, [r3, #8]
    }

    position++;
 8100ec6:	697b      	ldr	r3, [r7, #20]
 8100ec8:	3301      	adds	r3, #1
 8100eca:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8100ecc:	683a      	ldr	r2, [r7, #0]
 8100ece:	697b      	ldr	r3, [r7, #20]
 8100ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8100ed4:	2b00      	cmp	r3, #0
 8100ed6:	f47f af1f 	bne.w	8100d18 <HAL_GPIO_DeInit+0x14>
  }
}
 8100eda:	bf00      	nop
 8100edc:	bf00      	nop
 8100ede:	371c      	adds	r7, #28
 8100ee0:	46bd      	mov	sp, r7
 8100ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ee6:	4770      	bx	lr
 8100ee8:	580000c0 	.word	0x580000c0
 8100eec:	58000400 	.word	0x58000400
 8100ef0:	58020000 	.word	0x58020000
 8100ef4:	58020400 	.word	0x58020400
 8100ef8:	58020800 	.word	0x58020800
 8100efc:	58020c00 	.word	0x58020c00
 8100f00:	58021000 	.word	0x58021000
 8100f04:	58021400 	.word	0x58021400
 8100f08:	58021800 	.word	0x58021800
 8100f0c:	58021c00 	.word	0x58021c00
 8100f10:	58022000 	.word	0x58022000
 8100f14:	58022400 	.word	0x58022400

08100f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100f18:	b480      	push	{r7}
 8100f1a:	b083      	sub	sp, #12
 8100f1c:	af00      	add	r7, sp, #0
 8100f1e:	6078      	str	r0, [r7, #4]
 8100f20:	460b      	mov	r3, r1
 8100f22:	807b      	strh	r3, [r7, #2]
 8100f24:	4613      	mov	r3, r2
 8100f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100f28:	787b      	ldrb	r3, [r7, #1]
 8100f2a:	2b00      	cmp	r3, #0
 8100f2c:	d003      	beq.n	8100f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100f2e:	887a      	ldrh	r2, [r7, #2]
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100f34:	e003      	b.n	8100f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100f36:	887b      	ldrh	r3, [r7, #2]
 8100f38:	041a      	lsls	r2, r3, #16
 8100f3a:	687b      	ldr	r3, [r7, #4]
 8100f3c:	619a      	str	r2, [r3, #24]
}
 8100f3e:	bf00      	nop
 8100f40:	370c      	adds	r7, #12
 8100f42:	46bd      	mov	sp, r7
 8100f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f48:	4770      	bx	lr
	...

08100f4c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8100f4c:	b480      	push	{r7}
 8100f4e:	b083      	sub	sp, #12
 8100f50:	af00      	add	r7, sp, #0
 8100f52:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8100f54:	4a08      	ldr	r2, [pc, #32]	; (8100f78 <HAL_HSEM_FastTake+0x2c>)
 8100f56:	687b      	ldr	r3, [r7, #4]
 8100f58:	3320      	adds	r3, #32
 8100f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100f5e:	4a07      	ldr	r2, [pc, #28]	; (8100f7c <HAL_HSEM_FastTake+0x30>)
 8100f60:	4293      	cmp	r3, r2
 8100f62:	d101      	bne.n	8100f68 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8100f64:	2300      	movs	r3, #0
 8100f66:	e000      	b.n	8100f6a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8100f68:	2301      	movs	r3, #1
}
 8100f6a:	4618      	mov	r0, r3
 8100f6c:	370c      	adds	r7, #12
 8100f6e:	46bd      	mov	sp, r7
 8100f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f74:	4770      	bx	lr
 8100f76:	bf00      	nop
 8100f78:	58026400 	.word	0x58026400
 8100f7c:	80000100 	.word	0x80000100

08100f80 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8100f80:	b480      	push	{r7}
 8100f82:	b083      	sub	sp, #12
 8100f84:	af00      	add	r7, sp, #0
 8100f86:	6078      	str	r0, [r7, #4]
 8100f88:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8100f8a:	4906      	ldr	r1, [pc, #24]	; (8100fa4 <HAL_HSEM_Release+0x24>)
 8100f8c:	683b      	ldr	r3, [r7, #0]
 8100f8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8100f92:	687b      	ldr	r3, [r7, #4]
 8100f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8100f98:	bf00      	nop
 8100f9a:	370c      	adds	r7, #12
 8100f9c:	46bd      	mov	sp, r7
 8100f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fa2:	4770      	bx	lr
 8100fa4:	58026400 	.word	0x58026400

08100fa8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100fa8:	b480      	push	{r7}
 8100faa:	b083      	sub	sp, #12
 8100fac:	af00      	add	r7, sp, #0
 8100fae:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100fb0:	4b05      	ldr	r3, [pc, #20]	; (8100fc8 <HAL_HSEM_ActivateNotification+0x20>)
 8100fb2:	681a      	ldr	r2, [r3, #0]
 8100fb4:	4904      	ldr	r1, [pc, #16]	; (8100fc8 <HAL_HSEM_ActivateNotification+0x20>)
 8100fb6:	687b      	ldr	r3, [r7, #4]
 8100fb8:	4313      	orrs	r3, r2
 8100fba:	600b      	str	r3, [r1, #0]
#endif
}
 8100fbc:	bf00      	nop
 8100fbe:	370c      	adds	r7, #12
 8100fc0:	46bd      	mov	sp, r7
 8100fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fc6:	4770      	bx	lr
 8100fc8:	58026510 	.word	0x58026510

08100fcc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100fcc:	b580      	push	{r7, lr}
 8100fce:	b084      	sub	sp, #16
 8100fd0:	af00      	add	r7, sp, #0
 8100fd2:	60f8      	str	r0, [r7, #12]
 8100fd4:	460b      	mov	r3, r1
 8100fd6:	607a      	str	r2, [r7, #4]
 8100fd8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100fda:	4b37      	ldr	r3, [pc, #220]	; (81010b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fdc:	681b      	ldr	r3, [r3, #0]
 8100fde:	f023 0201 	bic.w	r2, r3, #1
 8100fe2:	4935      	ldr	r1, [pc, #212]	; (81010b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100fe4:	68fb      	ldr	r3, [r7, #12]
 8100fe6:	4313      	orrs	r3, r2
 8100fe8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100fea:	687b      	ldr	r3, [r7, #4]
 8100fec:	2b00      	cmp	r3, #0
 8100fee:	d123      	bne.n	8101038 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100ff0:	f7ff fcc4 	bl	810097c <HAL_GetCurrentCPUID>
 8100ff4:	4603      	mov	r3, r0
 8100ff6:	2b03      	cmp	r3, #3
 8100ff8:	d158      	bne.n	81010ac <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100ffa:	4b2f      	ldr	r3, [pc, #188]	; (81010b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ffc:	691b      	ldr	r3, [r3, #16]
 8100ffe:	4a2e      	ldr	r2, [pc, #184]	; (81010b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101000:	f023 0301 	bic.w	r3, r3, #1
 8101004:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101006:	4b2d      	ldr	r3, [pc, #180]	; (81010bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101008:	691b      	ldr	r3, [r3, #16]
 810100a:	4a2c      	ldr	r2, [pc, #176]	; (81010bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810100c:	f043 0304 	orr.w	r3, r3, #4
 8101010:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101012:	f3bf 8f4f 	dsb	sy
}
 8101016:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101018:	f3bf 8f6f 	isb	sy
}
 810101c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810101e:	7afb      	ldrb	r3, [r7, #11]
 8101020:	2b01      	cmp	r3, #1
 8101022:	d101      	bne.n	8101028 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101024:	bf30      	wfi
 8101026:	e000      	b.n	810102a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101028:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810102a:	4b24      	ldr	r3, [pc, #144]	; (81010bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810102c:	691b      	ldr	r3, [r3, #16]
 810102e:	4a23      	ldr	r2, [pc, #140]	; (81010bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101030:	f023 0304 	bic.w	r3, r3, #4
 8101034:	6113      	str	r3, [r2, #16]
 8101036:	e03c      	b.n	81010b2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101038:	687b      	ldr	r3, [r7, #4]
 810103a:	2b01      	cmp	r3, #1
 810103c:	d123      	bne.n	8101086 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810103e:	f7ff fc9d 	bl	810097c <HAL_GetCurrentCPUID>
 8101042:	4603      	mov	r3, r0
 8101044:	2b01      	cmp	r3, #1
 8101046:	d133      	bne.n	81010b0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101048:	4b1b      	ldr	r3, [pc, #108]	; (81010b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810104a:	695b      	ldr	r3, [r3, #20]
 810104c:	4a1a      	ldr	r2, [pc, #104]	; (81010b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810104e:	f023 0302 	bic.w	r3, r3, #2
 8101052:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101054:	4b19      	ldr	r3, [pc, #100]	; (81010bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101056:	691b      	ldr	r3, [r3, #16]
 8101058:	4a18      	ldr	r2, [pc, #96]	; (81010bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810105a:	f043 0304 	orr.w	r3, r3, #4
 810105e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101060:	f3bf 8f4f 	dsb	sy
}
 8101064:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101066:	f3bf 8f6f 	isb	sy
}
 810106a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810106c:	7afb      	ldrb	r3, [r7, #11]
 810106e:	2b01      	cmp	r3, #1
 8101070:	d101      	bne.n	8101076 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101072:	bf30      	wfi
 8101074:	e000      	b.n	8101078 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101076:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101078:	4b10      	ldr	r3, [pc, #64]	; (81010bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810107a:	691b      	ldr	r3, [r3, #16]
 810107c:	4a0f      	ldr	r2, [pc, #60]	; (81010bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810107e:	f023 0304 	bic.w	r3, r3, #4
 8101082:	6113      	str	r3, [r2, #16]
 8101084:	e015      	b.n	81010b2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101086:	f7ff fc79 	bl	810097c <HAL_GetCurrentCPUID>
 810108a:	4603      	mov	r3, r0
 810108c:	2b03      	cmp	r3, #3
 810108e:	d106      	bne.n	810109e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101090:	4b09      	ldr	r3, [pc, #36]	; (81010b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101092:	691b      	ldr	r3, [r3, #16]
 8101094:	4a08      	ldr	r2, [pc, #32]	; (81010b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101096:	f023 0304 	bic.w	r3, r3, #4
 810109a:	6113      	str	r3, [r2, #16]
 810109c:	e009      	b.n	81010b2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810109e:	4b06      	ldr	r3, [pc, #24]	; (81010b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010a0:	695b      	ldr	r3, [r3, #20]
 81010a2:	4a05      	ldr	r2, [pc, #20]	; (81010b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010a4:	f023 0304 	bic.w	r3, r3, #4
 81010a8:	6153      	str	r3, [r2, #20]
 81010aa:	e002      	b.n	81010b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81010ac:	bf00      	nop
 81010ae:	e000      	b.n	81010b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81010b0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81010b2:	3710      	adds	r7, #16
 81010b4:	46bd      	mov	sp, r7
 81010b6:	bd80      	pop	{r7, pc}
 81010b8:	58024800 	.word	0x58024800
 81010bc:	e000ed00 	.word	0xe000ed00

081010c0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81010c0:	b580      	push	{r7, lr}
 81010c2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81010c4:	f7ff fc5a 	bl	810097c <HAL_GetCurrentCPUID>
 81010c8:	4603      	mov	r3, r0
 81010ca:	2b03      	cmp	r3, #3
 81010cc:	d101      	bne.n	81010d2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81010ce:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81010d0:	e001      	b.n	81010d6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81010d2:	bf40      	sev
    __WFE ();
 81010d4:	bf20      	wfe
}
 81010d6:	bf00      	nop
 81010d8:	bd80      	pop	{r7, pc}
	...

081010dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81010dc:	b480      	push	{r7}
 81010de:	b089      	sub	sp, #36	; 0x24
 81010e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81010e2:	4bb3      	ldr	r3, [pc, #716]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010e4:	691b      	ldr	r3, [r3, #16]
 81010e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81010ea:	2b18      	cmp	r3, #24
 81010ec:	f200 8155 	bhi.w	810139a <HAL_RCC_GetSysClockFreq+0x2be>
 81010f0:	a201      	add	r2, pc, #4	; (adr r2, 81010f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81010f6:	bf00      	nop
 81010f8:	0810115d 	.word	0x0810115d
 81010fc:	0810139b 	.word	0x0810139b
 8101100:	0810139b 	.word	0x0810139b
 8101104:	0810139b 	.word	0x0810139b
 8101108:	0810139b 	.word	0x0810139b
 810110c:	0810139b 	.word	0x0810139b
 8101110:	0810139b 	.word	0x0810139b
 8101114:	0810139b 	.word	0x0810139b
 8101118:	08101183 	.word	0x08101183
 810111c:	0810139b 	.word	0x0810139b
 8101120:	0810139b 	.word	0x0810139b
 8101124:	0810139b 	.word	0x0810139b
 8101128:	0810139b 	.word	0x0810139b
 810112c:	0810139b 	.word	0x0810139b
 8101130:	0810139b 	.word	0x0810139b
 8101134:	0810139b 	.word	0x0810139b
 8101138:	08101189 	.word	0x08101189
 810113c:	0810139b 	.word	0x0810139b
 8101140:	0810139b 	.word	0x0810139b
 8101144:	0810139b 	.word	0x0810139b
 8101148:	0810139b 	.word	0x0810139b
 810114c:	0810139b 	.word	0x0810139b
 8101150:	0810139b 	.word	0x0810139b
 8101154:	0810139b 	.word	0x0810139b
 8101158:	0810118f 	.word	0x0810118f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810115c:	4b94      	ldr	r3, [pc, #592]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810115e:	681b      	ldr	r3, [r3, #0]
 8101160:	f003 0320 	and.w	r3, r3, #32
 8101164:	2b00      	cmp	r3, #0
 8101166:	d009      	beq.n	810117c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101168:	4b91      	ldr	r3, [pc, #580]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810116a:	681b      	ldr	r3, [r3, #0]
 810116c:	08db      	lsrs	r3, r3, #3
 810116e:	f003 0303 	and.w	r3, r3, #3
 8101172:	4a90      	ldr	r2, [pc, #576]	; (81013b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101174:	fa22 f303 	lsr.w	r3, r2, r3
 8101178:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810117a:	e111      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810117c:	4b8d      	ldr	r3, [pc, #564]	; (81013b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810117e:	61bb      	str	r3, [r7, #24]
    break;
 8101180:	e10e      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101182:	4b8d      	ldr	r3, [pc, #564]	; (81013b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101184:	61bb      	str	r3, [r7, #24]
    break;
 8101186:	e10b      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101188:	4b8c      	ldr	r3, [pc, #560]	; (81013bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 810118a:	61bb      	str	r3, [r7, #24]
    break;
 810118c:	e108      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810118e:	4b88      	ldr	r3, [pc, #544]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101192:	f003 0303 	and.w	r3, r3, #3
 8101196:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101198:	4b85      	ldr	r3, [pc, #532]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810119c:	091b      	lsrs	r3, r3, #4
 810119e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81011a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81011a4:	4b82      	ldr	r3, [pc, #520]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81011a8:	f003 0301 	and.w	r3, r3, #1
 81011ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81011ae:	4b80      	ldr	r3, [pc, #512]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81011b2:	08db      	lsrs	r3, r3, #3
 81011b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81011b8:	68fa      	ldr	r2, [r7, #12]
 81011ba:	fb02 f303 	mul.w	r3, r2, r3
 81011be:	ee07 3a90 	vmov	s15, r3
 81011c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81011c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81011ca:	693b      	ldr	r3, [r7, #16]
 81011cc:	2b00      	cmp	r3, #0
 81011ce:	f000 80e1 	beq.w	8101394 <HAL_RCC_GetSysClockFreq+0x2b8>
 81011d2:	697b      	ldr	r3, [r7, #20]
 81011d4:	2b02      	cmp	r3, #2
 81011d6:	f000 8083 	beq.w	81012e0 <HAL_RCC_GetSysClockFreq+0x204>
 81011da:	697b      	ldr	r3, [r7, #20]
 81011dc:	2b02      	cmp	r3, #2
 81011de:	f200 80a1 	bhi.w	8101324 <HAL_RCC_GetSysClockFreq+0x248>
 81011e2:	697b      	ldr	r3, [r7, #20]
 81011e4:	2b00      	cmp	r3, #0
 81011e6:	d003      	beq.n	81011f0 <HAL_RCC_GetSysClockFreq+0x114>
 81011e8:	697b      	ldr	r3, [r7, #20]
 81011ea:	2b01      	cmp	r3, #1
 81011ec:	d056      	beq.n	810129c <HAL_RCC_GetSysClockFreq+0x1c0>
 81011ee:	e099      	b.n	8101324 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81011f0:	4b6f      	ldr	r3, [pc, #444]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011f2:	681b      	ldr	r3, [r3, #0]
 81011f4:	f003 0320 	and.w	r3, r3, #32
 81011f8:	2b00      	cmp	r3, #0
 81011fa:	d02d      	beq.n	8101258 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81011fc:	4b6c      	ldr	r3, [pc, #432]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011fe:	681b      	ldr	r3, [r3, #0]
 8101200:	08db      	lsrs	r3, r3, #3
 8101202:	f003 0303 	and.w	r3, r3, #3
 8101206:	4a6b      	ldr	r2, [pc, #428]	; (81013b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101208:	fa22 f303 	lsr.w	r3, r2, r3
 810120c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810120e:	687b      	ldr	r3, [r7, #4]
 8101210:	ee07 3a90 	vmov	s15, r3
 8101214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101218:	693b      	ldr	r3, [r7, #16]
 810121a:	ee07 3a90 	vmov	s15, r3
 810121e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101226:	4b62      	ldr	r3, [pc, #392]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810122a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810122e:	ee07 3a90 	vmov	s15, r3
 8101232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101236:	ed97 6a02 	vldr	s12, [r7, #8]
 810123a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81013c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810123e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810124a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810124e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101252:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101256:	e087      	b.n	8101368 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101258:	693b      	ldr	r3, [r7, #16]
 810125a:	ee07 3a90 	vmov	s15, r3
 810125e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101262:	eddf 6a58 	vldr	s13, [pc, #352]	; 81013c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810126a:	4b51      	ldr	r3, [pc, #324]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810126e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101272:	ee07 3a90 	vmov	s15, r3
 8101276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810127a:	ed97 6a02 	vldr	s12, [r7, #8]
 810127e:	eddf 5a50 	vldr	s11, [pc, #320]	; 81013c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810128a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810128e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810129a:	e065      	b.n	8101368 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810129c:	693b      	ldr	r3, [r7, #16]
 810129e:	ee07 3a90 	vmov	s15, r3
 81012a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 81013c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81012aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012ae:	4b40      	ldr	r3, [pc, #256]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012b6:	ee07 3a90 	vmov	s15, r3
 81012ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012be:	ed97 6a02 	vldr	s12, [r7, #8]
 81012c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81013c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81012c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81012ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81012ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81012d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81012d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81012da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81012de:	e043      	b.n	8101368 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81012e0:	693b      	ldr	r3, [r7, #16]
 81012e2:	ee07 3a90 	vmov	s15, r3
 81012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 81013cc <HAL_RCC_GetSysClockFreq+0x2f0>
 81012ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012f2:	4b2f      	ldr	r3, [pc, #188]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81012f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012fa:	ee07 3a90 	vmov	s15, r3
 81012fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101302:	ed97 6a02 	vldr	s12, [r7, #8]
 8101306:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81013c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810130a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810130e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810131a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810131e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101322:	e021      	b.n	8101368 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101324:	693b      	ldr	r3, [r7, #16]
 8101326:	ee07 3a90 	vmov	s15, r3
 810132a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810132e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81013c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101336:	4b1e      	ldr	r3, [pc, #120]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810133a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810133e:	ee07 3a90 	vmov	s15, r3
 8101342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101346:	ed97 6a02 	vldr	s12, [r7, #8]
 810134a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81013c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810134e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810135a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810135e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101362:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101366:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101368:	4b11      	ldr	r3, [pc, #68]	; (81013b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810136c:	0a5b      	lsrs	r3, r3, #9
 810136e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101372:	3301      	adds	r3, #1
 8101374:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101376:	683b      	ldr	r3, [r7, #0]
 8101378:	ee07 3a90 	vmov	s15, r3
 810137c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101380:	edd7 6a07 	vldr	s13, [r7, #28]
 8101384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101388:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810138c:	ee17 3a90 	vmov	r3, s15
 8101390:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101392:	e005      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101394:	2300      	movs	r3, #0
 8101396:	61bb      	str	r3, [r7, #24]
    break;
 8101398:	e002      	b.n	81013a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810139a:	4b07      	ldr	r3, [pc, #28]	; (81013b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810139c:	61bb      	str	r3, [r7, #24]
    break;
 810139e:	bf00      	nop
  }

  return sysclockfreq;
 81013a0:	69bb      	ldr	r3, [r7, #24]
}
 81013a2:	4618      	mov	r0, r3
 81013a4:	3724      	adds	r7, #36	; 0x24
 81013a6:	46bd      	mov	sp, r7
 81013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ac:	4770      	bx	lr
 81013ae:	bf00      	nop
 81013b0:	58024400 	.word	0x58024400
 81013b4:	03d09000 	.word	0x03d09000
 81013b8:	003d0900 	.word	0x003d0900
 81013bc:	017d7840 	.word	0x017d7840
 81013c0:	46000000 	.word	0x46000000
 81013c4:	4c742400 	.word	0x4c742400
 81013c8:	4a742400 	.word	0x4a742400
 81013cc:	4bbebc20 	.word	0x4bbebc20

081013d0 <ResMgr_Init>:
  * @param  SendFunct : function pointer used to send message to the other core
  * @param  Callback  : function pointer used to publish the status to user side
  * @retval Return Status
  */
ResMgr_Status_t  ResMgr_Init(ResMgrSendMsg_t SendFunct, ResMgrCallback_t Callback)
{
 81013d0:	b580      	push	{r7, lr}
 81013d2:	b084      	sub	sp, #16
 81013d4:	af00      	add	r7, sp, #0
 81013d6:	6078      	str	r0, [r7, #4]
 81013d8:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 81013da:	2300      	movs	r3, #0
 81013dc:	73fb      	strb	r3, [r7, #15]
  uint32_t count = 0;
 81013de:	2300      	movs	r3, #0
 81013e0:	60bb      	str	r3, [r7, #8]
  /* lock table modification */
  RESMGR_TBL_LOCK(RESMGR_ID_RESMGR_TABLE);
 81013e2:	bf00      	nop
 81013e4:	201f      	movs	r0, #31
 81013e6:	f7ff fdb1 	bl	8100f4c <HAL_HSEM_FastTake>
 81013ea:	4603      	mov	r3, r0
 81013ec:	2b00      	cmp	r3, #0
 81013ee:	d1f9      	bne.n	81013e4 <ResMgr_Init+0x14>

  /* Check whether the resource is free */
  if(ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State != RESMGR_STATE_TBL_INIT)
 81013f0:	4b42      	ldr	r3, [pc, #264]	; (81014fc <ResMgr_Init+0x12c>)
 81013f2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 81013f6:	2b5a      	cmp	r3, #90	; 0x5a
 81013f8:	d062      	beq.n	81014c0 <ResMgr_Init+0xf0>
  {

#if defined(RESMGR_USE_DEFAULT_TBL)
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 81013fa:	e05a      	b.n	81014b2 <ResMgr_Init+0xe2>
    {
      if(Default_ResTbl[count] != RES_DEFAULT_ASSIGN_NONE)
 81013fc:	4a40      	ldr	r2, [pc, #256]	; (8101500 <ResMgr_Init+0x130>)
 81013fe:	68bb      	ldr	r3, [r7, #8]
 8101400:	4413      	add	r3, r2
 8101402:	781b      	ldrb	r3, [r3, #0]
 8101404:	2b00      	cmp	r3, #0
 8101406:	d02a      	beq.n	810145e <ResMgr_Init+0x8e>
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_ASSIGNED;
 8101408:	493c      	ldr	r1, [pc, #240]	; (81014fc <ResMgr_Init+0x12c>)
 810140a:	68ba      	ldr	r2, [r7, #8]
 810140c:	4613      	mov	r3, r2
 810140e:	009b      	lsls	r3, r3, #2
 8101410:	4413      	add	r3, r2
 8101412:	009b      	lsls	r3, r3, #2
 8101414:	440b      	add	r3, r1
 8101416:	3308      	adds	r3, #8
 8101418:	2201      	movs	r2, #1
 810141a:	601a      	str	r2, [r3, #0]
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU1)
 810141c:	4a38      	ldr	r2, [pc, #224]	; (8101500 <ResMgr_Init+0x130>)
 810141e:	68bb      	ldr	r3, [r7, #8]
 8101420:	4413      	add	r3, r2
 8101422:	781b      	ldrb	r3, [r3, #0]
 8101424:	2b01      	cmp	r3, #1
 8101426:	d109      	bne.n	810143c <ResMgr_Init+0x6c>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU1;
 8101428:	4934      	ldr	r1, [pc, #208]	; (81014fc <ResMgr_Init+0x12c>)
 810142a:	68ba      	ldr	r2, [r7, #8]
 810142c:	4613      	mov	r3, r2
 810142e:	009b      	lsls	r3, r3, #2
 8101430:	4413      	add	r3, r2
 8101432:	009b      	lsls	r3, r3, #2
 8101434:	440b      	add	r3, r1
 8101436:	3304      	adds	r3, #4
 8101438:	2208      	movs	r2, #8
 810143a:	601a      	str	r2, [r3, #0]
        }
        if ( Default_ResTbl[count]== RES_DEFAULT_ASSIGN_CPU2)
 810143c:	4a30      	ldr	r2, [pc, #192]	; (8101500 <ResMgr_Init+0x130>)
 810143e:	68bb      	ldr	r3, [r7, #8]
 8101440:	4413      	add	r3, r2
 8101442:	781b      	ldrb	r3, [r3, #0]
 8101444:	2b02      	cmp	r3, #2
 8101446:	d11e      	bne.n	8101486 <ResMgr_Init+0xb6>
        {
          ResMgr_Tbl[count].Ctx.Flags = RESMGR_FLAGS_CPU2;
 8101448:	492c      	ldr	r1, [pc, #176]	; (81014fc <ResMgr_Init+0x12c>)
 810144a:	68ba      	ldr	r2, [r7, #8]
 810144c:	4613      	mov	r3, r2
 810144e:	009b      	lsls	r3, r3, #2
 8101450:	4413      	add	r3, r2
 8101452:	009b      	lsls	r3, r3, #2
 8101454:	440b      	add	r3, r1
 8101456:	3304      	adds	r3, #4
 8101458:	2210      	movs	r2, #16
 810145a:	601a      	str	r2, [r3, #0]
 810145c:	e013      	b.n	8101486 <ResMgr_Init+0xb6>
        }
      }
      else
      {
        ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
 810145e:	4927      	ldr	r1, [pc, #156]	; (81014fc <ResMgr_Init+0x12c>)
 8101460:	68ba      	ldr	r2, [r7, #8]
 8101462:	4613      	mov	r3, r2
 8101464:	009b      	lsls	r3, r3, #2
 8101466:	4413      	add	r3, r2
 8101468:	009b      	lsls	r3, r3, #2
 810146a:	440b      	add	r3, r1
 810146c:	3308      	adds	r3, #8
 810146e:	2200      	movs	r2, #0
 8101470:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[count].Ctx.Flags = 0;
 8101472:	4922      	ldr	r1, [pc, #136]	; (81014fc <ResMgr_Init+0x12c>)
 8101474:	68ba      	ldr	r2, [r7, #8]
 8101476:	4613      	mov	r3, r2
 8101478:	009b      	lsls	r3, r3, #2
 810147a:	4413      	add	r3, r2
 810147c:	009b      	lsls	r3, r3, #2
 810147e:	440b      	add	r3, r1
 8101480:	3304      	adds	r3, #4
 8101482:	2200      	movs	r2, #0
 8101484:	601a      	str	r2, [r3, #0]
      }
      ResMgr_Tbl[count].Spinlock = 0;
 8101486:	491d      	ldr	r1, [pc, #116]	; (81014fc <ResMgr_Init+0x12c>)
 8101488:	68ba      	ldr	r2, [r7, #8]
 810148a:	4613      	mov	r3, r2
 810148c:	009b      	lsls	r3, r3, #2
 810148e:	4413      	add	r3, r2
 8101490:	009b      	lsls	r3, r3, #2
 8101492:	440b      	add	r3, r1
 8101494:	2200      	movs	r2, #0
 8101496:	601a      	str	r2, [r3, #0]
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
 8101498:	4918      	ldr	r1, [pc, #96]	; (81014fc <ResMgr_Init+0x12c>)
 810149a:	68ba      	ldr	r2, [r7, #8]
 810149c:	4613      	mov	r3, r2
 810149e:	009b      	lsls	r3, r3, #2
 81014a0:	4413      	add	r3, r2
 81014a2:	009b      	lsls	r3, r3, #2
 81014a4:	440b      	add	r3, r1
 81014a6:	3310      	adds	r3, #16
 81014a8:	2200      	movs	r2, #0
 81014aa:	601a      	str	r2, [r3, #0]
    for( ; count < RESMGR_ENTRY_NBR ; count++)
 81014ac:	68bb      	ldr	r3, [r7, #8]
 81014ae:	3301      	adds	r3, #1
 81014b0:	60bb      	str	r3, [r7, #8]
 81014b2:	68bb      	ldr	r3, [r7, #8]
 81014b4:	2b12      	cmp	r3, #18
 81014b6:	d9a1      	bls.n	81013fc <ResMgr_Init+0x2c>
      ResMgr_Tbl[count].Ctx.Flags = 0;
      ResMgr_Tbl[count].Ctx.State = RESMGR_STATE_RELEASED;
      ResMgr_Tbl[count].Ctx.pHandle = NULL;
    }
#endif /* RESMGR_USE_DEFAULT_TBL */
    ResMgr_Tbl[RESMGR_ID_RESMGR_TABLE].Ctx.State = RESMGR_STATE_TBL_INIT;
 81014b8:	4b10      	ldr	r3, [pc, #64]	; (81014fc <ResMgr_Init+0x12c>)
 81014ba:	225a      	movs	r2, #90	; 0x5a
 81014bc:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
  }

  RESMGR_TBL_UNLOCK(RESMGR_ID_RESMGR_TABLE);
 81014c0:	2100      	movs	r1, #0
 81014c2:	201f      	movs	r0, #31
 81014c4:	f7ff fd5c 	bl	8100f80 <HAL_HSEM_Release>

  if((SendFunct != NULL) || (Callback != NULL))
 81014c8:	687b      	ldr	r3, [r7, #4]
 81014ca:	2b00      	cmp	r3, #0
 81014cc:	d102      	bne.n	81014d4 <ResMgr_Init+0x104>
 81014ce:	683b      	ldr	r3, [r7, #0]
 81014d0:	2b00      	cmp	r3, #0
 81014d2:	d00c      	beq.n	81014ee <ResMgr_Init+0x11e>
  {
    ResMgrSendMsgFunct = SendFunct;
 81014d4:	4a0b      	ldr	r2, [pc, #44]	; (8101504 <ResMgr_Init+0x134>)
 81014d6:	687b      	ldr	r3, [r7, #4]
 81014d8:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct = Callback;
 81014da:	4a0b      	ldr	r2, [pc, #44]	; (8101508 <ResMgr_Init+0x138>)
 81014dc:	683b      	ldr	r3, [r7, #0]
 81014de:	6013      	str	r3, [r2, #0]
    ResMgrCallbackFunct(RESMGR_ID_ALL, RESMGR_MSG_INIT);
 81014e0:	4b09      	ldr	r3, [pc, #36]	; (8101508 <ResMgr_Init+0x138>)
 81014e2:	681b      	ldr	r3, [r3, #0]
 81014e4:	2100      	movs	r1, #0
 81014e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 81014ea:	4798      	blx	r3
 81014ec:	e001      	b.n	81014f2 <ResMgr_Init+0x122>
  }
  else
  {
    ret = RESMGR_ERROR;
 81014ee:	2301      	movs	r3, #1
 81014f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 81014f2:	7bfb      	ldrb	r3, [r7, #15]
}
 81014f4:	4618      	mov	r0, r3
 81014f6:	3710      	adds	r7, #16
 81014f8:	46bd      	mov	sp, r7
 81014fa:	bd80      	pop	{r7, pc}
 81014fc:	10000010 	.word	0x10000010
 8101500:	08101910 	.word	0x08101910
 8101504:	100001a8 	.word	0x100001a8
 8101508:	100001ac 	.word	0x100001ac

0810150c <ResMgr_Request>:
  * @param  prio: Request priority
  * @param  phandle: resource driver handle
  * @retval Status
  */
ResMgr_Status_t  ResMgr_Request ( uint32_t id, uint32_t flags, uint32_t prio, void *phandle)
{
 810150c:	b580      	push	{r7, lr}
 810150e:	b086      	sub	sp, #24
 8101510:	af00      	add	r7, sp, #0
 8101512:	60f8      	str	r0, [r7, #12]
 8101514:	60b9      	str	r1, [r7, #8]
 8101516:	607a      	str	r2, [r7, #4]
 8101518:	603b      	str	r3, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 810151a:	2300      	movs	r3, #0
 810151c:	75fb      	strb	r3, [r7, #23]

  if(id < RESMGR_ENTRY_NBR)
 810151e:	68fb      	ldr	r3, [r7, #12]
 8101520:	2b12      	cmp	r3, #18
 8101522:	f200 80f6 	bhi.w	8101712 <ResMgr_Request+0x206>
  {
    /* lock table modification*/

    RESMGR_TBL_LOCK(id);
 8101526:	bf00      	nop
 8101528:	201f      	movs	r0, #31
 810152a:	f7ff fd0f 	bl	8100f4c <HAL_HSEM_FastTake>
 810152e:	4603      	mov	r3, r0
 8101530:	2b00      	cmp	r3, #0
 8101532:	d1f9      	bne.n	8101528 <ResMgr_Request+0x1c>

    /* Check whether the resource is free */
    /* Or the resource is assigned by default to the current Core*/
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 8101534:	497a      	ldr	r1, [pc, #488]	; (8101720 <ResMgr_Request+0x214>)
 8101536:	68fa      	ldr	r2, [r7, #12]
 8101538:	4613      	mov	r3, r2
 810153a:	009b      	lsls	r3, r3, #2
 810153c:	4413      	add	r3, r2
 810153e:	009b      	lsls	r3, r3, #2
 8101540:	440b      	add	r3, r1
 8101542:	3308      	adds	r3, #8
 8101544:	681b      	ldr	r3, [r3, #0]
 8101546:	2b00      	cmp	r3, #0
 8101548:	d019      	beq.n	810157e <ResMgr_Request+0x72>
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810154a:	4975      	ldr	r1, [pc, #468]	; (8101720 <ResMgr_Request+0x214>)
 810154c:	68fa      	ldr	r2, [r7, #12]
 810154e:	4613      	mov	r3, r2
 8101550:	009b      	lsls	r3, r3, #2
 8101552:	4413      	add	r3, r2
 8101554:	009b      	lsls	r3, r3, #2
 8101556:	440b      	add	r3, r1
 8101558:	3308      	adds	r3, #8
 810155a:	681b      	ldr	r3, [r3, #0]
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_RELEASED) ||
 810155c:	2b01      	cmp	r3, #1
 810155e:	d165      	bne.n	810162c <ResMgr_Request+0x120>
        (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) == (flags & RESMGR_FLAGS_OWNER_MSK)))
 8101560:	496f      	ldr	r1, [pc, #444]	; (8101720 <ResMgr_Request+0x214>)
 8101562:	68fa      	ldr	r2, [r7, #12]
 8101564:	4613      	mov	r3, r2
 8101566:	009b      	lsls	r3, r3, #2
 8101568:	4413      	add	r3, r2
 810156a:	009b      	lsls	r3, r3, #2
 810156c:	440b      	add	r3, r1
 810156e:	3304      	adds	r3, #4
 8101570:	681a      	ldr	r2, [r3, #0]
 8101572:	68bb      	ldr	r3, [r7, #8]
 8101574:	4053      	eors	r3, r2
 8101576:	f003 0318 	and.w	r3, r3, #24
       ((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) &&
 810157a:	2b00      	cmp	r3, #0
 810157c:	d156      	bne.n	810162c <ResMgr_Request+0x120>
    {

      if(phandle != NULL)
 810157e:	683b      	ldr	r3, [r7, #0]
 8101580:	2b00      	cmp	r3, #0
 8101582:	d02c      	beq.n	81015de <ResMgr_Request+0xd2>
      {
        if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 8101584:	68bb      	ldr	r3, [r7, #8]
 8101586:	f003 0301 	and.w	r3, r3, #1
 810158a:	2b00      	cmp	r3, #0
 810158c:	d01d      	beq.n	81015ca <ResMgr_Request+0xbe>
        {
          if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 810158e:	4964      	ldr	r1, [pc, #400]	; (8101720 <ResMgr_Request+0x214>)
 8101590:	68fa      	ldr	r2, [r7, #12]
 8101592:	4613      	mov	r3, r2
 8101594:	009b      	lsls	r3, r3, #2
 8101596:	4413      	add	r3, r2
 8101598:	009b      	lsls	r3, r3, #2
 810159a:	440b      	add	r3, r1
 810159c:	3310      	adds	r3, #16
 810159e:	681b      	ldr	r3, [r3, #0]
 81015a0:	2b00      	cmp	r3, #0
 81015a2:	d00c      	beq.n	81015be <ResMgr_Request+0xb2>
          {
            *((uint32_t *)phandle) = (uint32_t ) (uint32_t *)ResMgr_Tbl[id].Ctx.pHandle;
 81015a4:	495e      	ldr	r1, [pc, #376]	; (8101720 <ResMgr_Request+0x214>)
 81015a6:	68fa      	ldr	r2, [r7, #12]
 81015a8:	4613      	mov	r3, r2
 81015aa:	009b      	lsls	r3, r3, #2
 81015ac:	4413      	add	r3, r2
 81015ae:	009b      	lsls	r3, r3, #2
 81015b0:	440b      	add	r3, r1
 81015b2:	3310      	adds	r3, #16
 81015b4:	681b      	ldr	r3, [r3, #0]
 81015b6:	461a      	mov	r2, r3
 81015b8:	683b      	ldr	r3, [r7, #0]
 81015ba:	601a      	str	r2, [r3, #0]
 81015bc:	e00f      	b.n	81015de <ResMgr_Request+0xd2>
          }
          else
          {
            RESMGR_TBL_UNLOCK(id);
 81015be:	2100      	movs	r1, #0
 81015c0:	201f      	movs	r0, #31
 81015c2:	f7ff fcdd 	bl	8100f80 <HAL_HSEM_Release>
            return  RESMGR_ERROR;
 81015c6:	2301      	movs	r3, #1
 81015c8:	e0a6      	b.n	8101718 <ResMgr_Request+0x20c>
          }
        }
        else
        {
          ResMgr_Tbl[id].Ctx.pHandle = phandle;
 81015ca:	4955      	ldr	r1, [pc, #340]	; (8101720 <ResMgr_Request+0x214>)
 81015cc:	68fa      	ldr	r2, [r7, #12]
 81015ce:	4613      	mov	r3, r2
 81015d0:	009b      	lsls	r3, r3, #2
 81015d2:	4413      	add	r3, r2
 81015d4:	009b      	lsls	r3, r3, #2
 81015d6:	440b      	add	r3, r1
 81015d8:	3310      	adds	r3, #16
 81015da:	683a      	ldr	r2, [r7, #0]
 81015dc:	601a      	str	r2, [r3, #0]
        }
      }
      /* Resource free, update the table and send a message */
      ResMgr_Tbl[id].Ctx.Flags = (flags & ~RESMGR_FLAGS_ACCESS_MSK) | \
 81015de:	68bb      	ldr	r3, [r7, #8]
 81015e0:	f023 0306 	bic.w	r3, r3, #6
 81015e4:	f043 0102 	orr.w	r1, r3, #2
 81015e8:	484d      	ldr	r0, [pc, #308]	; (8101720 <ResMgr_Request+0x214>)
 81015ea:	68fa      	ldr	r2, [r7, #12]
 81015ec:	4613      	mov	r3, r2
 81015ee:	009b      	lsls	r3, r3, #2
 81015f0:	4413      	add	r3, r2
 81015f2:	009b      	lsls	r3, r3, #2
 81015f4:	4403      	add	r3, r0
 81015f6:	3304      	adds	r3, #4
 81015f8:	6019      	str	r1, [r3, #0]
        RESMGR_FLAGS_ACCESS_NORMAL;

      ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_ASSIGNED;
 81015fa:	4949      	ldr	r1, [pc, #292]	; (8101720 <ResMgr_Request+0x214>)
 81015fc:	68fa      	ldr	r2, [r7, #12]
 81015fe:	4613      	mov	r3, r2
 8101600:	009b      	lsls	r3, r3, #2
 8101602:	4413      	add	r3, r2
 8101604:	009b      	lsls	r3, r3, #2
 8101606:	440b      	add	r3, r1
 8101608:	3308      	adds	r3, #8
 810160a:	2201      	movs	r2, #1
 810160c:	601a      	str	r2, [r3, #0]
      RESMGR_TBL_UNLOCK(id);
 810160e:	2100      	movs	r1, #0
 8101610:	201f      	movs	r0, #31
 8101612:	f7ff fcb5 	bl	8100f80 <HAL_HSEM_Release>
      ResMgrSendMsgFunct(id, RESMGR_MSG_ASSIGN);
 8101616:	4b43      	ldr	r3, [pc, #268]	; (8101724 <ResMgr_Request+0x218>)
 8101618:	681b      	ldr	r3, [r3, #0]
 810161a:	2101      	movs	r1, #1
 810161c:	68f8      	ldr	r0, [r7, #12]
 810161e:	4798      	blx	r3
      ResMgrCallbackFunct(id, RESMGR_MSG_ASSIGNED);
 8101620:	4b41      	ldr	r3, [pc, #260]	; (8101728 <ResMgr_Request+0x21c>)
 8101622:	681b      	ldr	r3, [r3, #0]
 8101624:	2111      	movs	r1, #17
 8101626:	68f8      	ldr	r0, [r7, #12]
 8101628:	4798      	blx	r3
 810162a:	e074      	b.n	8101716 <ResMgr_Request+0x20a>
    }
    else  /* Resource already used, update the table and send a message */
    {
      ret = RESMGR_BUSY;
 810162c:	2302      	movs	r3, #2
 810162e:	75fb      	strb	r3, [r7, #23]

      /* is the request for normal access, reject*/
      if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_NORMAL)
 8101630:	68bb      	ldr	r3, [r7, #8]
 8101632:	f003 0306 	and.w	r3, r3, #6
 8101636:	2b02      	cmp	r3, #2
 8101638:	d10e      	bne.n	8101658 <ResMgr_Request+0x14c>
      {
        RESMGR_TBL_UNLOCK(id);
 810163a:	2100      	movs	r1, #0
 810163c:	201f      	movs	r0, #31
 810163e:	f7ff fc9f 	bl	8100f80 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_REJECT);
 8101642:	4b38      	ldr	r3, [pc, #224]	; (8101724 <ResMgr_Request+0x218>)
 8101644:	681b      	ldr	r3, [r3, #0]
 8101646:	2105      	movs	r1, #5
 8101648:	68f8      	ldr	r0, [r7, #12]
 810164a:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_REJECTED);
 810164c:	4b36      	ldr	r3, [pc, #216]	; (8101728 <ResMgr_Request+0x21c>)
 810164e:	681b      	ldr	r3, [r3, #0]
 8101650:	2115      	movs	r1, #21
 8101652:	68f8      	ldr	r0, [r7, #12]
 8101654:	4798      	blx	r3
 8101656:	e05e      	b.n	8101716 <ResMgr_Request+0x20a>
      }

      /* it is a pend request? */
      else if((flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_PEND)
 8101658:	68bb      	ldr	r3, [r7, #8]
 810165a:	f003 0306 	and.w	r3, r3, #6
 810165e:	2b04      	cmp	r3, #4
 8101660:	d154      	bne.n	810170c <ResMgr_Request+0x200>
      {
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 8101662:	492f      	ldr	r1, [pc, #188]	; (8101720 <ResMgr_Request+0x214>)
 8101664:	68fa      	ldr	r2, [r7, #12]
 8101666:	4613      	mov	r3, r2
 8101668:	009b      	lsls	r3, r3, #2
 810166a:	4413      	add	r3, r2
 810166c:	009b      	lsls	r3, r3, #2
 810166e:	440b      	add	r3, r1
 8101670:	3304      	adds	r3, #4
 8101672:	681b      	ldr	r3, [r3, #0]
 8101674:	f003 0218 	and.w	r2, r3, #24
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 8101678:	68bb      	ldr	r3, [r7, #8]
 810167a:	f023 0306 	bic.w	r3, r3, #6
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 810167e:	4313      	orrs	r3, r2
          (flags & (~RESMGR_FLAGS_ACCESS_MSK)) | RESMGR_FLAGS_ACCESS_PEND;
 8101680:	f043 0104 	orr.w	r1, r3, #4
        ResMgr_Tbl[id].Ctx.Flags = (ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) | \
 8101684:	4826      	ldr	r0, [pc, #152]	; (8101720 <ResMgr_Request+0x214>)
 8101686:	68fa      	ldr	r2, [r7, #12]
 8101688:	4613      	mov	r3, r2
 810168a:	009b      	lsls	r3, r3, #2
 810168c:	4413      	add	r3, r2
 810168e:	009b      	lsls	r3, r3, #2
 8101690:	4403      	add	r3, r0
 8101692:	3304      	adds	r3, #4
 8101694:	6019      	str	r1, [r3, #0]

        if(phandle != NULL)
 8101696:	683b      	ldr	r3, [r7, #0]
 8101698:	2b00      	cmp	r3, #0
 810169a:	d028      	beq.n	81016ee <ResMgr_Request+0x1e2>
        {
          if((flags & RESMGR_FLAGS_INHERIT_MSK) == RESMGR_FLAGS_INHERIT_HANDLE)
 810169c:	68bb      	ldr	r3, [r7, #8]
 810169e:	f003 0301 	and.w	r3, r3, #1
 81016a2:	2b00      	cmp	r3, #0
 81016a4:	d019      	beq.n	81016da <ResMgr_Request+0x1ce>
          {
            if (ResMgr_Tbl[id].Ctx.pHandle != NULL)
 81016a6:	491e      	ldr	r1, [pc, #120]	; (8101720 <ResMgr_Request+0x214>)
 81016a8:	68fa      	ldr	r2, [r7, #12]
 81016aa:	4613      	mov	r3, r2
 81016ac:	009b      	lsls	r3, r3, #2
 81016ae:	4413      	add	r3, r2
 81016b0:	009b      	lsls	r3, r3, #2
 81016b2:	440b      	add	r3, r1
 81016b4:	3310      	adds	r3, #16
 81016b6:	681b      	ldr	r3, [r3, #0]
 81016b8:	2b00      	cmp	r3, #0
 81016ba:	d00c      	beq.n	81016d6 <ResMgr_Request+0x1ca>
            {
              *((uint32_t *)phandle) = (uint32_t )(uint32_t *) ResMgr_Tbl[id].Ctx.pHandle;
 81016bc:	4918      	ldr	r1, [pc, #96]	; (8101720 <ResMgr_Request+0x214>)
 81016be:	68fa      	ldr	r2, [r7, #12]
 81016c0:	4613      	mov	r3, r2
 81016c2:	009b      	lsls	r3, r3, #2
 81016c4:	4413      	add	r3, r2
 81016c6:	009b      	lsls	r3, r3, #2
 81016c8:	440b      	add	r3, r1
 81016ca:	3310      	adds	r3, #16
 81016cc:	681b      	ldr	r3, [r3, #0]
 81016ce:	461a      	mov	r2, r3
 81016d0:	683b      	ldr	r3, [r7, #0]
 81016d2:	601a      	str	r2, [r3, #0]
 81016d4:	e00b      	b.n	81016ee <ResMgr_Request+0x1e2>
            }
            else
            {
              return  RESMGR_ERROR;
 81016d6:	2301      	movs	r3, #1
 81016d8:	e01e      	b.n	8101718 <ResMgr_Request+0x20c>
            }
          }
          else
          {
            ResMgr_Tbl[id].Ctx.pHandle = phandle;
 81016da:	4911      	ldr	r1, [pc, #68]	; (8101720 <ResMgr_Request+0x214>)
 81016dc:	68fa      	ldr	r2, [r7, #12]
 81016de:	4613      	mov	r3, r2
 81016e0:	009b      	lsls	r3, r3, #2
 81016e2:	4413      	add	r3, r2
 81016e4:	009b      	lsls	r3, r3, #2
 81016e6:	440b      	add	r3, r1
 81016e8:	3310      	adds	r3, #16
 81016ea:	683a      	ldr	r2, [r7, #0]
 81016ec:	601a      	str	r2, [r3, #0]
          }
        }
        RESMGR_TBL_UNLOCK(id);
 81016ee:	2100      	movs	r1, #0
 81016f0:	201f      	movs	r0, #31
 81016f2:	f7ff fc45 	bl	8100f80 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_PEND);
 81016f6:	4b0b      	ldr	r3, [pc, #44]	; (8101724 <ResMgr_Request+0x218>)
 81016f8:	681b      	ldr	r3, [r3, #0]
 81016fa:	2104      	movs	r1, #4
 81016fc:	68f8      	ldr	r0, [r7, #12]
 81016fe:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_PENDED);
 8101700:	4b09      	ldr	r3, [pc, #36]	; (8101728 <ResMgr_Request+0x21c>)
 8101702:	681b      	ldr	r3, [r3, #0]
 8101704:	2114      	movs	r1, #20
 8101706:	68f8      	ldr	r0, [r7, #12]
 8101708:	4798      	blx	r3
 810170a:	e004      	b.n	8101716 <ResMgr_Request+0x20a>
      }
      else
      {
        ret = RESMGR_ERROR;
 810170c:	2301      	movs	r3, #1
 810170e:	75fb      	strb	r3, [r7, #23]
 8101710:	e001      	b.n	8101716 <ResMgr_Request+0x20a>
    }

  }
  else
  {
    ret = RESMGR_ERROR;
 8101712:	2301      	movs	r3, #1
 8101714:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8101716:	7dfb      	ldrb	r3, [r7, #23]
}
 8101718:	4618      	mov	r0, r3
 810171a:	3718      	adds	r7, #24
 810171c:	46bd      	mov	sp, r7
 810171e:	bd80      	pop	{r7, pc}
 8101720:	10000010 	.word	0x10000010
 8101724:	100001a8 	.word	0x100001a8
 8101728:	100001ac 	.word	0x100001ac

0810172c <ResMgr_Release>:
  * @brief  Release the resource
  * @param  id: Resource identifier
  * @retval Status
  */
ResMgr_Status_t  ResMgr_Release ( uint32_t id, uint32_t flags)
{
 810172c:	b580      	push	{r7, lr}
 810172e:	b084      	sub	sp, #16
 8101730:	af00      	add	r7, sp, #0
 8101732:	6078      	str	r0, [r7, #4]
 8101734:	6039      	str	r1, [r7, #0]
  ResMgr_Status_t ret = RESMGR_OK;
 8101736:	2300      	movs	r3, #0
 8101738:	73fb      	strb	r3, [r7, #15]

  if(id < RESMGR_ENTRY_NBR)
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	2b12      	cmp	r3, #18
 810173e:	f200 80a2 	bhi.w	8101886 <ResMgr_Release+0x15a>
  {
    /* lock table modification */
    RESMGR_TBL_LOCK(id);
 8101742:	bf00      	nop
 8101744:	201f      	movs	r0, #31
 8101746:	f7ff fc01 	bl	8100f4c <HAL_HSEM_FastTake>
 810174a:	4603      	mov	r3, r0
 810174c:	2b00      	cmp	r3, #0
 810174e:	d1f9      	bne.n	8101744 <ResMgr_Release+0x18>
    /* Check whether the resource is free */
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) && \
 8101750:	4950      	ldr	r1, [pc, #320]	; (8101894 <ResMgr_Release+0x168>)
 8101752:	687a      	ldr	r2, [r7, #4]
 8101754:	4613      	mov	r3, r2
 8101756:	009b      	lsls	r3, r3, #2
 8101758:	4413      	add	r3, r2
 810175a:	009b      	lsls	r3, r3, #2
 810175c:	440b      	add	r3, r1
 810175e:	3308      	adds	r3, #8
 8101760:	681b      	ldr	r3, [r3, #0]
 8101762:	2b01      	cmp	r3, #1
 8101764:	f040 8085 	bne.w	8101872 <ResMgr_Release+0x146>
      ((ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_OWNER_MSK) & (flags & RESMGR_FLAGS_OWNER_MSK)) != 0)
 8101768:	494a      	ldr	r1, [pc, #296]	; (8101894 <ResMgr_Release+0x168>)
 810176a:	687a      	ldr	r2, [r7, #4]
 810176c:	4613      	mov	r3, r2
 810176e:	009b      	lsls	r3, r3, #2
 8101770:	4413      	add	r3, r2
 8101772:	009b      	lsls	r3, r3, #2
 8101774:	440b      	add	r3, r1
 8101776:	3304      	adds	r3, #4
 8101778:	681a      	ldr	r2, [r3, #0]
 810177a:	683b      	ldr	r3, [r7, #0]
 810177c:	4013      	ands	r3, r2
 810177e:	f003 0318 	and.w	r3, r3, #24
    if((ResMgr_Tbl[id].Ctx.State == RESMGR_STATE_ASSIGNED) && \
 8101782:	2b00      	cmp	r3, #0
 8101784:	d075      	beq.n	8101872 <ResMgr_Release+0x146>
    {
      if((ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_PEND)
 8101786:	4943      	ldr	r1, [pc, #268]	; (8101894 <ResMgr_Release+0x168>)
 8101788:	687a      	ldr	r2, [r7, #4]
 810178a:	4613      	mov	r3, r2
 810178c:	009b      	lsls	r3, r3, #2
 810178e:	4413      	add	r3, r2
 8101790:	009b      	lsls	r3, r3, #2
 8101792:	440b      	add	r3, r1
 8101794:	3304      	adds	r3, #4
 8101796:	681b      	ldr	r3, [r3, #0]
 8101798:	f003 0306 	and.w	r3, r3, #6
 810179c:	2b04      	cmp	r3, #4
 810179e:	d140      	bne.n	8101822 <ResMgr_Release+0xf6>
      {
        /* Another task is waiting for the resource ?*/
        ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_ASSIGNED;
 81017a0:	493c      	ldr	r1, [pc, #240]	; (8101894 <ResMgr_Release+0x168>)
 81017a2:	687a      	ldr	r2, [r7, #4]
 81017a4:	4613      	mov	r3, r2
 81017a6:	009b      	lsls	r3, r3, #2
 81017a8:	4413      	add	r3, r2
 81017aa:	009b      	lsls	r3, r3, #2
 81017ac:	440b      	add	r3, r1
 81017ae:	3308      	adds	r3, #8
 81017b0:	2201      	movs	r2, #1
 81017b2:	601a      	str	r2, [r3, #0]
        ResMgr_Tbl[id].Ctx.Flags &=~RESMGR_FLAGS_ACCESS_MSK;
 81017b4:	4937      	ldr	r1, [pc, #220]	; (8101894 <ResMgr_Release+0x168>)
 81017b6:	687a      	ldr	r2, [r7, #4]
 81017b8:	4613      	mov	r3, r2
 81017ba:	009b      	lsls	r3, r3, #2
 81017bc:	4413      	add	r3, r2
 81017be:	009b      	lsls	r3, r3, #2
 81017c0:	440b      	add	r3, r1
 81017c2:	3304      	adds	r3, #4
 81017c4:	681b      	ldr	r3, [r3, #0]
 81017c6:	f023 0106 	bic.w	r1, r3, #6
 81017ca:	4832      	ldr	r0, [pc, #200]	; (8101894 <ResMgr_Release+0x168>)
 81017cc:	687a      	ldr	r2, [r7, #4]
 81017ce:	4613      	mov	r3, r2
 81017d0:	009b      	lsls	r3, r3, #2
 81017d2:	4413      	add	r3, r2
 81017d4:	009b      	lsls	r3, r3, #2
 81017d6:	4403      	add	r3, r0
 81017d8:	3304      	adds	r3, #4
 81017da:	6019      	str	r1, [r3, #0]
        ResMgr_Tbl[id].Ctx.Flags |= RESMGR_FLAGS_ACCESS_NORMAL;
 81017dc:	492d      	ldr	r1, [pc, #180]	; (8101894 <ResMgr_Release+0x168>)
 81017de:	687a      	ldr	r2, [r7, #4]
 81017e0:	4613      	mov	r3, r2
 81017e2:	009b      	lsls	r3, r3, #2
 81017e4:	4413      	add	r3, r2
 81017e6:	009b      	lsls	r3, r3, #2
 81017e8:	440b      	add	r3, r1
 81017ea:	3304      	adds	r3, #4
 81017ec:	681b      	ldr	r3, [r3, #0]
 81017ee:	f043 0102 	orr.w	r1, r3, #2
 81017f2:	4828      	ldr	r0, [pc, #160]	; (8101894 <ResMgr_Release+0x168>)
 81017f4:	687a      	ldr	r2, [r7, #4]
 81017f6:	4613      	mov	r3, r2
 81017f8:	009b      	lsls	r3, r3, #2
 81017fa:	4413      	add	r3, r2
 81017fc:	009b      	lsls	r3, r3, #2
 81017fe:	4403      	add	r3, r0
 8101800:	3304      	adds	r3, #4
 8101802:	6019      	str	r1, [r3, #0]
        RESMGR_TBL_UNLOCK(id);
 8101804:	2100      	movs	r1, #0
 8101806:	201f      	movs	r0, #31
 8101808:	f7ff fbba 	bl	8100f80 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_PEND_ASSIGN);
 810180c:	4b22      	ldr	r3, [pc, #136]	; (8101898 <ResMgr_Release+0x16c>)
 810180e:	681b      	ldr	r3, [r3, #0]
 8101810:	2103      	movs	r1, #3
 8101812:	6878      	ldr	r0, [r7, #4]
 8101814:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_PEND_ASSIGNED);
 8101816:	4b21      	ldr	r3, [pc, #132]	; (810189c <ResMgr_Release+0x170>)
 8101818:	681b      	ldr	r3, [r3, #0]
 810181a:	2113      	movs	r1, #19
 810181c:	6878      	ldr	r0, [r7, #4]
 810181e:	4798      	blx	r3
 8101820:	e027      	b.n	8101872 <ResMgr_Release+0x146>
      }
      else if((ResMgr_Tbl[id].Ctx.Flags & RESMGR_FLAGS_ACCESS_MSK) == RESMGR_FLAGS_ACCESS_NORMAL)
 8101822:	491c      	ldr	r1, [pc, #112]	; (8101894 <ResMgr_Release+0x168>)
 8101824:	687a      	ldr	r2, [r7, #4]
 8101826:	4613      	mov	r3, r2
 8101828:	009b      	lsls	r3, r3, #2
 810182a:	4413      	add	r3, r2
 810182c:	009b      	lsls	r3, r3, #2
 810182e:	440b      	add	r3, r1
 8101830:	3304      	adds	r3, #4
 8101832:	681b      	ldr	r3, [r3, #0]
 8101834:	f003 0306 	and.w	r3, r3, #6
 8101838:	2b02      	cmp	r3, #2
 810183a:	d118      	bne.n	810186e <ResMgr_Release+0x142>
      {
        ResMgr_Tbl[id].Ctx.State = RESMGR_STATE_RELEASED;
 810183c:	4915      	ldr	r1, [pc, #84]	; (8101894 <ResMgr_Release+0x168>)
 810183e:	687a      	ldr	r2, [r7, #4]
 8101840:	4613      	mov	r3, r2
 8101842:	009b      	lsls	r3, r3, #2
 8101844:	4413      	add	r3, r2
 8101846:	009b      	lsls	r3, r3, #2
 8101848:	440b      	add	r3, r1
 810184a:	3308      	adds	r3, #8
 810184c:	2200      	movs	r2, #0
 810184e:	601a      	str	r2, [r3, #0]
        RESMGR_TBL_UNLOCK(id);
 8101850:	2100      	movs	r1, #0
 8101852:	201f      	movs	r0, #31
 8101854:	f7ff fb94 	bl	8100f80 <HAL_HSEM_Release>
        ResMgrSendMsgFunct(id, RESMGR_MSG_RELEASE);
 8101858:	4b0f      	ldr	r3, [pc, #60]	; (8101898 <ResMgr_Release+0x16c>)
 810185a:	681b      	ldr	r3, [r3, #0]
 810185c:	2102      	movs	r1, #2
 810185e:	6878      	ldr	r0, [r7, #4]
 8101860:	4798      	blx	r3
        ResMgrCallbackFunct(id, RESMGR_MSG_RELEASED);
 8101862:	4b0e      	ldr	r3, [pc, #56]	; (810189c <ResMgr_Release+0x170>)
 8101864:	681b      	ldr	r3, [r3, #0]
 8101866:	2112      	movs	r1, #18
 8101868:	6878      	ldr	r0, [r7, #4]
 810186a:	4798      	blx	r3
 810186c:	e001      	b.n	8101872 <ResMgr_Release+0x146>
      }
      else
      {
        return  RESMGR_ERROR;
 810186e:	2301      	movs	r3, #1
 8101870:	e00c      	b.n	810188c <ResMgr_Release+0x160>
      }
    }
    ResMgr_Tbl[id].Spinlock = 0;
 8101872:	4908      	ldr	r1, [pc, #32]	; (8101894 <ResMgr_Release+0x168>)
 8101874:	687a      	ldr	r2, [r7, #4]
 8101876:	4613      	mov	r3, r2
 8101878:	009b      	lsls	r3, r3, #2
 810187a:	4413      	add	r3, r2
 810187c:	009b      	lsls	r3, r3, #2
 810187e:	440b      	add	r3, r1
 8101880:	2200      	movs	r2, #0
 8101882:	601a      	str	r2, [r3, #0]
 8101884:	e001      	b.n	810188a <ResMgr_Release+0x15e>
  }
  else
  {
    ret = RESMGR_ERROR;
 8101886:	2301      	movs	r3, #1
 8101888:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 810188a:	7bfb      	ldrb	r3, [r7, #15]
}
 810188c:	4618      	mov	r0, r3
 810188e:	3710      	adds	r7, #16
 8101890:	46bd      	mov	sp, r7
 8101892:	bd80      	pop	{r7, pc}
 8101894:	10000010 	.word	0x10000010
 8101898:	100001a8 	.word	0x100001a8
 810189c:	100001ac 	.word	0x100001ac

081018a0 <__libc_init_array>:
 81018a0:	b570      	push	{r4, r5, r6, lr}
 81018a2:	4d0d      	ldr	r5, [pc, #52]	; (81018d8 <__libc_init_array+0x38>)
 81018a4:	4c0d      	ldr	r4, [pc, #52]	; (81018dc <__libc_init_array+0x3c>)
 81018a6:	1b64      	subs	r4, r4, r5
 81018a8:	10a4      	asrs	r4, r4, #2
 81018aa:	2600      	movs	r6, #0
 81018ac:	42a6      	cmp	r6, r4
 81018ae:	d109      	bne.n	81018c4 <__libc_init_array+0x24>
 81018b0:	4d0b      	ldr	r5, [pc, #44]	; (81018e0 <__libc_init_array+0x40>)
 81018b2:	4c0c      	ldr	r4, [pc, #48]	; (81018e4 <__libc_init_array+0x44>)
 81018b4:	f000 f818 	bl	81018e8 <_init>
 81018b8:	1b64      	subs	r4, r4, r5
 81018ba:	10a4      	asrs	r4, r4, #2
 81018bc:	2600      	movs	r6, #0
 81018be:	42a6      	cmp	r6, r4
 81018c0:	d105      	bne.n	81018ce <__libc_init_array+0x2e>
 81018c2:	bd70      	pop	{r4, r5, r6, pc}
 81018c4:	f855 3b04 	ldr.w	r3, [r5], #4
 81018c8:	4798      	blx	r3
 81018ca:	3601      	adds	r6, #1
 81018cc:	e7ee      	b.n	81018ac <__libc_init_array+0xc>
 81018ce:	f855 3b04 	ldr.w	r3, [r5], #4
 81018d2:	4798      	blx	r3
 81018d4:	3601      	adds	r6, #1
 81018d6:	e7f2      	b.n	81018be <__libc_init_array+0x1e>
 81018d8:	08101924 	.word	0x08101924
 81018dc:	08101924 	.word	0x08101924
 81018e0:	08101924 	.word	0x08101924
 81018e4:	08101928 	.word	0x08101928

081018e8 <_init>:
 81018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81018ea:	bf00      	nop
 81018ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81018ee:	bc08      	pop	{r3}
 81018f0:	469e      	mov	lr, r3
 81018f2:	4770      	bx	lr

081018f4 <_fini>:
 81018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81018f6:	bf00      	nop
 81018f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81018fa:	bc08      	pop	{r3}
 81018fc:	469e      	mov	lr, r3
 81018fe:	4770      	bx	lr
